import test from "ava";
import { RijndaelEncryptTransform, RijndaelDecryptTransform } from "transforms/modern/rijndael";
import { testBytesToBytes } from "../_testutils";
import { hexToBytes, bytesToHex } from "cryptopunk.utils";

function doTest(title, expectedHex, messageHex, keyHex, blockSize)
{
	const key = hexToBytes(keyHex);
	const options = { blockSize: blockSize || 128 };
	test("Rijndael encrypts " + title, testBytesToBytes, RijndaelEncryptTransform, expectedHex, messageHex, key, options);
	test("Rijndael decrypts " + title, testBytesToBytes, RijndaelDecryptTransform, messageHex, expectedHex, key, options);
}

doTest("FIPS-197 128-bit vector", "69c4e0d86a7b0430d8cdb78070b4c55a", "00112233445566778899aabbccddeeff", "000102030405060708090a0b0c0d0e0f");
doTest("FIPS-197 192-bit vector", "dda97ca4864cdfe06eaf70a0ec0d7191", "00112233445566778899aabbccddeeff", "000102030405060708090a0b0c0d0e0f1011121314151617");
doTest("FIPS-197 256-bit vector", "8ea2b7ca516745bfeafc49904b496089", "00112233445566778899aabbccddeeff", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f");

doTest("Rijndael 2002 128/128-bit vector #1", "66e94bd4ef8a2c3b884cfa59ca342b2e", "00000000000000000000000000000000", "00000000000000000000000000000000");
doTest("Rijndael 2002 128/128-bit vector #2", "f795bd4a52e29ed713d313fa20e98dbc", "66e94bd4ef8a2c3b884cfa59ca342b2e", "00000000000000000000000000000000");
doTest("Rijndael 2002 160/128-bit vector #1", "9e38b8eb1d2025a1665ad4b1f5438bb5cae1ac3f", "0000000000000000000000000000000000000000", "00000000000000000000000000000000", 160);
doTest("Rijndael 2002 160/128-bit vector #2", "939c167e7f916d45670ee21bfc939e1055054a96", "9e38b8eb1d2025a1665ad4b1f5438bb5cae1ac3f", "00000000000000000000000000000000", 160);
doTest("Rijndael 2002 192/128-bit vector #1", "a92732eb488d8bb98ecd8d95dc9c02e052f250ad369b3849", "000000000000000000000000000000000000000000000000", "00000000000000000000000000000000", 192);
doTest("Rijndael 2002 192/128-bit vector #2", "106f34179c3982ddc6750aa01936b7a180e6b0b9d8d690ec", "a92732eb488d8bb98ecd8d95dc9c02e052f250ad369b3849", "00000000000000000000000000000000", 192);
doTest("Rijndael 2002 224/128-bit vector #1", "0623522d88f7b9c63437537157f625dd5697ab628a3b9be2549895c8", "00000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000", 224);
doTest("Rijndael 2002 224/128-bit vector #2", "93f93cbdabe23415620e6990b0443d621f6afbd6edefd6990a1965a8", "0623522d88f7b9c63437537157f625dd5697ab628a3b9be2549895c8", "00000000000000000000000000000000", 224);
doTest("Rijndael 2002 256/128-bit vector #1", "a693b288df7dae5b1757640276439230db77c4cd7a871e24d6162e54af434891", "0000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000", 256);
doTest("Rijndael 2002 256/128-bit vector #2", "5f05857c80b68ea42ccbc759d42c28d5cd490f1d180c7a9397ee585bea770391", "a693b288df7dae5b1757640276439230db77c4cd7a871e24d6162e54af434891", "00000000000000000000000000000000", 256);

doTest("Rijndael 2002 128/160-bit vector #1", "94b434f8f57b9780f0eff1a9ec4c112c", "00000000000000000000000000000000", "0000000000000000000000000000000000000000");
doTest("Rijndael 2002 128/160-bit vector #2", "35a00ec955df43417ceac2ab2b3f3e76", "94b434f8f57b9780f0eff1a9ec4c112c", "0000000000000000000000000000000000000000");
doTest("Rijndael 2002 160/160-bit vector #1", "33b12ab81db7972e8fdc529dda46fcb529b31826", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 160/160-bit vector #2", "97f03eb018c0bb9195bf37c6a0aece8e4cb8de5f", "33b12ab81db7972e8fdc529dda46fcb529b31826", "0000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 192/160-bit vector #1", "528e2fff6005427b67bb1ed31ecc09a69ef41531df5ba5b2", "000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 192/160-bit vector #2", "71c7687a4c93ebc35601e3662256e10115beed56a410d7ac", "528e2fff6005427b67bb1ed31ecc09a69ef41531df5ba5b2", "0000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 224/160-bit vector #1", "58a0c53f3822a32464704d409c2fd0521f3a93e1f6fcfd4c87f1c551", "00000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 224/160-bit vector #2", "d8e93ef2eb49857049d6f6e0f40b67516d2696f94013c065283f7f01", "58a0c53f3822a32464704d409c2fd0521f3a93e1f6fcfd4c87f1c551", "0000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 256/160-bit vector #1", "938d36e0cb6b7937841dab7f1668e47b485d3acd6b3f6d598b0a9f923823331d", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", 256);
doTest("Rijndael 2002 256/160-bit vector #2", "7b44491d1b24a93b904d171f074ad69669c2b70b134a4d2d773250a4414d78be", "938d36e0cb6b7937841dab7f1668e47b485d3acd6b3f6d598b0a9f923823331d", "0000000000000000000000000000000000000000", 256);

doTest("Rijndael 2002 128/192-bit vector #1", "aae06992acbf52a3e8f4a96ec9300bd7", "00000000000000000000000000000000", "000000000000000000000000000000000000000000000000");
doTest("Rijndael 2002 128/192-bit vector #2", "52f674b7b9030fdab13d18dc214eb331", "aae06992acbf52a3e8f4a96ec9300bd7", "000000000000000000000000000000000000000000000000");
doTest("Rijndael 2002 160/192-bit vector #1", "33060f9d4705ddd2c7675f0099140e5a98729257", "0000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 160/192-bit vector #2", "012cab64982156a5710e790f85ec442ce13c520f", "33060f9d4705ddd2c7675f0099140e5a98729257", "000000000000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 192/192-bit vector #1", "c6348be20007bac4a8bd62890c8147a2432e760e9a9f9ab8", "000000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 192/192-bit vector #2", "eb9def13c253f81c1fc2829426ed166a65a105c6a04ca33d", "c6348be20007bac4a8bd62890c8147a2432e760e9a9f9ab8", "000000000000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 224/192-bit vector #1", "3856b17bea77c4611e3397066828aadda004706a2c8009df40a811fe", "00000000000000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 224/192-bit vector #2", "160ad76a97ae2c1e05942fde3da2962684a92ccc74b8dc23bde4f469", "3856b17bea77c4611e3397066828aadda004706a2c8009df40a811fe", "000000000000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 256/192-bit vector #1", "f927363ef5b3b4984a9eb9109844152ec167f08102644e3f9028070433df9f2a", "0000000000000000000000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000", 256);
doTest("Rijndael 2002 256/192-bit vector #2", "4e03389c68b2e3f623ad8f7f6bfc88613b86f334f4148029ae25f50db144b80c", "f927363ef5b3b4984a9eb9109844152ec167f08102644e3f9028070433df9f2a", "000000000000000000000000000000000000000000000000", 256);

doTest("Rijndael 2002 128/224-bit vector #1", "73f8dff62a36f3ebf31d6f73a56ff279", "00000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000");
doTest("Rijndael 2002 128/224-bit vector #2", "3a72f21e10b6473ea9ff14a232e675b4", "73f8dff62a36f3ebf31d6f73a56ff279", "00000000000000000000000000000000000000000000000000000000");
doTest("Rijndael 2002 160/224-bit vector #1", "e9f5ea0fa39bb6ad7339f28e58e2e7535f261827", "0000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 160/224-bit vector #2", "06ef9bc82905306d45810e12d0807796a3d338f9", "e9f5ea0fa39bb6ad7339f28e58e2e7535f261827", "00000000000000000000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 192/224-bit vector #1", "ecbe9942cd6703e16d358a829d542456d71bd3408eb23c56", "000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 192/224-bit vector #2", "fd10458ed034368a34047905165b78a6f0591ffeebf47cc7", "ecbe9942cd6703e16d358a829d542456d71bd3408eb23c56", "00000000000000000000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 224/224-bit vector #1", "fe1cf0c8ddad24e3d751933100e8e89b61cd5d31c96abff7209c495c", "00000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 224/224-bit vector #2", "515d8e2f2b9c5708f112c6de31caca47afb86838b716975a24a09cd4", "fe1cf0c8ddad24e3d751933100e8e89b61cd5d31c96abff7209c495c", "00000000000000000000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 256/224-bit vector #1", "bc18bf6d369c955bbb271cbcdd66c368356dba5b33c0005550d2320b1c617e21", "0000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000", 256);
doTest("Rijndael 2002 256/224-bit vector #2", "60aba1d2be45d8abfdcf97bcb39f6c17df29985cf321bab75e26a26100ac00af", "bc18bf6d369c955bbb271cbcdd66c368356dba5b33c0005550d2320b1c617e21", "00000000000000000000000000000000000000000000000000000000", 256);

doTest("Rijndael 2002 128/256-bit vector #1", "dc95c078a2408989ad48a21492842087", "00000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000");
doTest("Rijndael 2002 128/256-bit vector #2", "08c374848c228233c2b34f332bd2e9d3", "dc95c078a2408989ad48a21492842087", "0000000000000000000000000000000000000000000000000000000000000000");
doTest("Rijndael 2002 160/256-bit vector #1", "30991844f72973b3b2161f1f11e7f8d9863c5118", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 160/256-bit vector #2", "eef8b7cc9dbe0f03a1fe9d82e9a759fd281c67e0", "30991844f72973b3b2161f1f11e7f8d9863c5118", "0000000000000000000000000000000000000000000000000000000000000000", 160);
doTest("Rijndael 2002 192/256-bit vector #1", "17004e806faef168fc9cd56f98f070982075c70c8132b945", "000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 192/256-bit vector #2", "bed33b0af364dbf15f9c2f3fb24fbdf1d36129c586eea6b7", "17004e806faef168fc9cd56f98f070982075c70c8132b945", "0000000000000000000000000000000000000000000000000000000000000000", 192);
doTest("Rijndael 2002 224/256-bit vector #1", "9bf26fad5680d56b572067ec2fe162f449404c86303f8be38fab6e02", "00000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 224/256-bit vector #2", "658f144a34af44aae66cfddab955c483dfbcb4ee9a19a6701f158a66", "9bf26fad5680d56b572067ec2fe162f449404c86303f8be38fab6e02", "0000000000000000000000000000000000000000000000000000000000000000", 224);
doTest("Rijndael 2002 256/256-bit vector #1", "c6227e7740b7e53b5cb77865278eab0726f62366d9aabad908936123a1fc8af3", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", 256);
doTest("Rijndael 2002 256/256-bit vector #2", "9843e807319c32ad1ea3935ef56a2ba96e4bf19c30e47d88a2b97cbbf2e159e7", "c6227e7740b7e53b5cb77865278eab0726f62366d9aabad908936123a1fc8af3", "0000000000000000000000000000000000000000000000000000000000000000", 256);

// Iterative exercise from https://blogs.msdn.microsoft.com/si_team/2006/05/19/aes-test-vectors/

function exerciseEncrypt(k, b)
{
	const tf = new RijndaelEncryptTransform();

	const n = k + b;
	const S = new Uint8Array(n);

	for (let i = 0; i < 1000; i++)
	{
		const plaintext = S.subarray(0, b);
		const key = S.subarray(b);
		// We encrypt twice per iteration (this is meant to test reuse of round keys in other implementations)
		let ciphertext = tf.transform(plaintext, key);
		ciphertext = tf.transform(ciphertext, key);
		// Move old key to front and append ciphertext
		S.set(key);
		S.set(ciphertext, k);
	}

	return S.subarray(S.length - b);
}

function exerciseDecrypt(k, b, key, ciphertext)
{
	const tf = new RijndaelDecryptTransform();

	const keyBytes = hexToBytes(key);
	const ciphertextBytes = hexToBytes(ciphertext);
	const n = b + k;
	const S = new Uint8Array(n);
	S.set(keyBytes);
	S.set(ciphertextBytes, k);
	// We encrypted 1000 times, so we need to decrypt 999 to get back to our origin
	for (let i = 0; i < 999; i++)
	{
		const key = S.subarray(0, k);
		const ciphertext = S.subarray(k);
		// We decrypt twice per iteration (this is meant to test reuse of round keys in other implementations)
		let plaintext = tf.transform(ciphertext, key);
		plaintext = tf.transform(plaintext, key);
		// Move old key to end of buffer and prepend the new plaintext
		S.set(key, n - k);
		S.set(plaintext);
	}

	return S.subarray(0, b);
}

// Based on twofish vector construction
test("Exercise 128-bit Encrypt", t => {
	const expected = hexToBytes("bd883f01035e58f42f9d812f2dacbcd8");
	const actual = exerciseEncrypt(16, 16);
	t.deepEqual(actual, expected);
});

test("Exercise 192-bit Encrypt", t => {
	const expected = hexToBytes("41afb1004c073d92fdefa84a4a6b26ad");
	const actual = exerciseEncrypt(24, 16);
	t.deepEqual(actual, expected);
});

test("Exercise 256-bit Encrypt", t => {
	const expected = hexToBytes("c84b0f3a2c76dd9871900b07f09bdd3e");
	const actual = exerciseEncrypt(32, 16);
	t.deepEqual(actual, expected);
});

// These are just the reverse of the encryption exercises. We need to get back to 16 0-bytes
test("Exercise 128-bit Decrypt", t => {

	const key = "ae2324475917da16b41f6ed3f1e46861";
	const ciphertext = "bd883f01035e58f42f9d812f2dacbcd8";
	const expected = hexToBytes("00000000000000000000000000000000");
	const actual = exerciseDecrypt(16, 16, key, ciphertext);
	t.deepEqual(actual, expected);
});

test("Exercise 192-bit Decrypt", t => {

	const key = "621e105b3b92edd40e01c7119b9f3a5d2044fd7e66edb303";
	const ciphertext = "41afb1004c073d92fdefa84a4a6b26ad";
	const expected = hexToBytes("00000000000000000000000000000000");
	const actual = exerciseDecrypt(24, 16, key, ciphertext);
	t.deepEqual(actual, expected);
});

test("Exercise 256-bit Decrypt", t => {

	const key = "f405417529a3861dbef530c3e6912fa5ea8169c9c67a7322eacf5eefc012af9d";
	const ciphertext = "c84b0f3a2c76dd9871900b07f09bdd3e";
	const expected = hexToBytes("00000000000000000000000000000000");
	const actual = exerciseDecrypt(32, 16, key, ciphertext);
	t.deepEqual(actual, expected);
});