import { BlockCipherTransform } from "../block-ciphers/block-cipher";
import { bytesToInt32sBE, int32sToBytesBE } from "../../cryptopunk.utils";
import { gfMulTable } from "../../cryptopunk.galois";

const KEY_SIZES = [128, 160, 192, 224, 256, 288, 320];

const VARIANT_VALUES = [
	"anubis-0",
	"anubis"
];

const VARIANT_NAMES = [
	"Anubis-0",
	"Anubis"
];

// Tweaked S-box:
const S_BOX = [
	0xba, 0x54, 0x2f, 0x74, 0x53, 0xd3, 0xd2, 0x4d, 0x50, 0xac, 0x8d, 0xbf, 0x70, 0x52, 0x9a, 0x4c,
	0xea, 0xd5, 0x97, 0xd1, 0x33, 0x51, 0x5b, 0xa6, 0xde, 0x48, 0xa8, 0x99, 0xdb, 0x32, 0xb7, 0xfc,
	0xe3, 0x9e, 0x91, 0x9b, 0xe2, 0xbb, 0x41, 0x6e, 0xa5, 0xcb, 0x6b, 0x95, 0xa1, 0xf3, 0xb1, 0x02,
	0xcc, 0xc4, 0x1d, 0x14, 0xc3, 0x63, 0xda, 0x5d, 0x5f, 0xdc, 0x7d, 0xcd, 0x7f, 0x5a, 0x6c, 0x5c,
	0xf7, 0x26, 0xff, 0xed, 0xe8, 0x9d, 0x6f, 0x8e, 0x19, 0xa0, 0xf0, 0x89, 0x0f, 0x07, 0xaf, 0xfb,
	0x08, 0x15, 0x0d, 0x04, 0x01, 0x64, 0xdf, 0x76, 0x79, 0xdd, 0x3d, 0x16, 0x3f, 0x37, 0x6d, 0x38,
	0xb9, 0x73, 0xe9, 0x35, 0x55, 0x71, 0x7b, 0x8c, 0x72, 0x88, 0xf6, 0x2a, 0x3e, 0x5e, 0x27, 0x46,
	0x0c, 0x65, 0x68, 0x61, 0x03, 0xc1, 0x57, 0xd6, 0xd9, 0x58, 0xd8, 0x66, 0xd7, 0x3a, 0xc8, 0x3c,
	0xfa, 0x96, 0xa7, 0x98, 0xec, 0xb8, 0xc7, 0xae, 0x69, 0x4b, 0xab, 0xa9, 0x67, 0x0a, 0x47, 0xf2,
	0xb5, 0x22, 0xe5, 0xee, 0xbe, 0x2b, 0x81, 0x12, 0x83, 0x1b, 0x0e, 0x23, 0xf5, 0x45, 0x21, 0xce,
	0x49, 0x2c, 0xf9, 0xe6, 0xb6, 0x28, 0x17, 0x82, 0x1a, 0x8b, 0xfe, 0x8a, 0x09, 0xc9, 0x87, 0x4e,
	0xe1, 0x2e, 0xe4, 0xe0, 0xeb, 0x90, 0xa4, 0x1e, 0x85, 0x60, 0x00, 0x25, 0xf4, 0xf1, 0x94, 0x0b,
	0xe7, 0x75, 0xef, 0x34, 0x31, 0xd4, 0xd0, 0x86, 0x7e, 0xad, 0xfd, 0x29, 0x30, 0x3b, 0x9f, 0xf8,
	0xc6, 0x13, 0x06, 0x05, 0xc5, 0x11, 0x77, 0x7c, 0x7a, 0x78, 0x36, 0x1c, 0x39, 0x59, 0x18, 0x56,
	0xb3, 0xb0, 0x24, 0x20, 0xb2, 0x92, 0xa3, 0xc0, 0x44, 0x62, 0x10, 0xb4, 0x84, 0x43, 0x93, 0xc2,
	0x4a, 0xbd, 0x8f, 0x2d, 0xbc, 0x9c, 0x6a, 0x40, 0xcf, 0xa2, 0x80, 0x4f, 0x1f, 0xca, 0xaa, 0x42
];

// Original S-box:
const S_BOX_0 = [
	0xa7, 0xd3, 0xe6, 0x71, 0xd0, 0xac, 0x4d, 0x79, 0x3a, 0xc9, 0x91, 0xfc, 0x1e, 0x47, 0x54, 0xbd,
	0x8c, 0xa5, 0x7a, 0xfb, 0x63, 0xb8, 0xdd, 0xd4, 0xe5, 0xb3, 0xc5, 0xbe, 0xa9, 0x88, 0x0c, 0xa2,
	0x39, 0xdf, 0x29, 0xda, 0x2b, 0xa8, 0xcb, 0x4c, 0x4b, 0x22, 0xaa, 0x24, 0x41, 0x70, 0xa6, 0xf9,
	0x5a, 0xe2, 0xb0, 0x36, 0x7d, 0xe4, 0x33, 0xff, 0x60, 0x20, 0x08, 0x8b, 0x5e, 0xab, 0x7f, 0x78,
	0x7c, 0x2c, 0x57, 0xd2, 0xdc, 0x6d, 0x7e, 0x0d, 0x53, 0x94, 0xc3, 0x28, 0x27, 0x06, 0x5f, 0xad,
	0x67, 0x5c, 0x55, 0x48, 0x0e, 0x52, 0xea, 0x42, 0x5b, 0x5d, 0x30, 0x58, 0x51, 0x59, 0x3c, 0x4e,
	0x38, 0x8a, 0x72, 0x14, 0xe7, 0xc6, 0xde, 0x50, 0x8e, 0x92, 0xd1, 0x77, 0x93, 0x45, 0x9a, 0xce,
	0x2d, 0x03, 0x62, 0xb6, 0xb9, 0xbf, 0x96, 0x6b, 0x3f, 0x07, 0x12, 0xae, 0x40, 0x34, 0x46, 0x3e,
	0xdb, 0xcf, 0xec, 0xcc, 0xc1, 0xa1, 0xc0, 0xd6, 0x1d, 0xf4, 0x61, 0x3b, 0x10, 0xd8, 0x68, 0xa0,
	0xb1, 0x0a, 0x69, 0x6c, 0x49, 0xfa, 0x76, 0xc4, 0x9e, 0x9b, 0x6e, 0x99, 0xc2, 0xb7, 0x98, 0xbc,
	0x8f, 0x85, 0x1f, 0xb4, 0xf8, 0x11, 0x2e, 0x00, 0x25, 0x1c, 0x2a, 0x3d, 0x05, 0x4f, 0x7b, 0xb2,
	0x32, 0x90, 0xaf, 0x19, 0xa3, 0xf7, 0x73, 0x9d, 0x15, 0x74, 0xee, 0xca, 0x9f, 0x0f, 0x1b, 0x75,
	0x86, 0x84, 0x9c, 0x4a, 0x97, 0x1a, 0x65, 0xf6, 0xed, 0x09, 0xbb, 0x26, 0x83, 0xeb, 0x6f, 0x81,
	0x04, 0x6a, 0x43, 0x01, 0x17, 0xe1, 0x87, 0xf5, 0x8d, 0xe3, 0x23, 0x80, 0x44, 0x16, 0x66, 0x21,
	0xfe, 0xd5, 0x31, 0xd9, 0x35, 0x18, 0x02, 0x64, 0xf2, 0xf1, 0x56, 0xcd, 0x82, 0xc8, 0xba, 0xf0,
	0xef, 0xe9, 0xe8, 0xfd, 0x89, 0xd7, 0xc7, 0xb5, 0xa4, 0x2f, 0x95, 0x13, 0x0b, 0xf3, 0xe0, 0x37
];

const ANUBIS_POLYNOMIAL = 0x11d;

const S_BOXES = {
	"anubis-0": S_BOX_0,
	"anubis": S_BOX
};

// Precomputed tables - indexed by variant name:
const TABLES = {};

// TODO: Remove transformation tables (do transformations directly in cipher)
// Precalculates s-boxes and transformation tables
function precompute(variant)
{
	const tables = TABLES[variant];
	if (tables)
	{
		// Already calculated
		return tables;
	}
	const sbox = S_BOXES[variant];
	
	const T0 = new Uint32Array(256),
		T1 = new Uint32Array(256),
		T2 = new Uint32Array(256),
		T3 = new Uint32Array(256),
		T4 = new Uint32Array(256),
		T5 = new Uint32Array(256);
	
	const mul2 = gfMulTable(2, ANUBIS_POLYNOMIAL),
		mul4 = gfMulTable(4, ANUBIS_POLYNOMIAL),
		mul6 = gfMulTable(6, ANUBIS_POLYNOMIAL),
		mul8 = gfMulTable(8, ANUBIS_POLYNOMIAL);

	for (let i = 0; i < 256; i++)
	{
		const s1 = sbox[i];

		const
			s2 = mul2[s1], s4 = mul4[s1], s6 = mul6[s1],
			i2 = mul2[i ], i6 = mul6[i ], i8 = mul8[i];

		T0[i] = (s1 << 24) | (s2 << 16) | (s4 << 8) | s6;
		T1[i] = (s2 << 24) | (s1 << 16) | (s6 << 8) | s4;
		T2[i] = (s4 << 24) | (s6 << 16) | (s1 << 8) | s2;
		T3[i] = (s6 << 24) | (s4 << 16) | (s2 << 8) | s1;
		T4[i] = (s1 << 24) | (s1 << 16) | (s1 << 8) | s1;
		T5[i] = ( i << 24) | (i2 << 16) | (i6 << 8) | i8;
	}

	TABLES[variant] = [T0, T1, T2, T3, T4, T5];

	return TABLES[variant];
}

class AnubisBaseTransform extends BlockCipherTransform
{
	constructor(decrypt)
	{
		super(decrypt);
		this.addOption("variant", "Variant", "anubis", { type: "select", values: VARIANT_VALUES, texts: VARIANT_NAMES });
	}

	transform(bytes, keyBytes)
	{
		this.checkBytesSize("Key", keyBytes, KEY_SIZES);

		// Precalculate tables (once, stored for later use)
		const tables = precompute(this.options.variant);

		const roundKeys = this.prepareRoundKeys(keyBytes, tables);

		return this.transformBlocks(bytes, 128, roundKeys, tables);
	}

	prepareRoundKeys(keyBytes, tables)
	{
		const [T0, T1, T2, T3, T4, T5] = tables;

		const keyWordCount = keyBytes.length / 4;
		const kappa = bytesToInt32sBE(keyBytes);
		const inter = new Uint32Array(keyWordCount);

		const rounds = 8 + keyWordCount;

		const roundKeys = new Array(rounds + 1);

		const k = new Uint32Array(4);
		for (let r = 0;  r < roundKeys.length; r++)
		{
			const kappaN = kappa[keyWordCount - 1];
			for (let i = 0; i < 4; i++)
			{
				k[i] = T4[(kappaN >>> (24 - i * 8)) & 0xff];
			}

			for (let j = keyWordCount - 2; j >= 0; j--)
			{
				for (let i = 0; i < 4; i++)
				{
					const ki = k[i];
					k[i] = T4[(kappa[j] >>> (24 - i * 8)) & 0xff] ^
						(T5[ ki >>> 24        ] & 0xff000000) ^
						(T5[(ki >>> 16) & 0xff] & 0x00ff0000) ^
						(T5[(ki >>>  8) & 0xff] & 0x0000ff00) ^
						(T5[(ki       ) & 0xff] & 0x000000ff);
				}
			}

			roundKeys[r] = Uint32Array.from(k);

			for (let i = 0; i < keyWordCount; i++)
			{
				inter[i] =
					T0[(kappa[i] >>> 24)       ] ^
					T1[(kappa[(keyWordCount + i - 1) % keyWordCount] >>> 16) & 0xff] ^
					T2[(kappa[(keyWordCount + i - 2) % keyWordCount] >>>  8) & 0xff] ^
					T3[(kappa[(keyWordCount + i - 3) % keyWordCount]       ) & 0xff];
			}

			kappa[0] =
				(T0[4 * r    ] & 0xff000000) ^
				(T1[4 * r + 1] & 0x00ff0000) ^
				(T2[4 * r + 2] & 0x0000ff00) ^
				(T3[4 * r + 3] & 0x000000ff) ^
				inter[0];
			
			for (let i = 1; i < keyWordCount; i++)
			{
				kappa[i] = inter[i];
			}
		}

		return roundKeys;
	}

	transformBlock(block, dest, destOffset, roundKeys, tables)
	{
		const [T0, T1, T2, T3] = tables;

		const state = bytesToInt32sBE(block);
		const inter = new Uint32Array(state.length);

		const rounds = roundKeys.length - 1;

		for (let i = 0; i < 4; i++)
		{
			state[i] ^= roundKeys[0][i];
		}

		// N-1 rounds:
		for (let r = 1; r < rounds; r++)
		{
			for (let i = 0; i < 4; i++)
			{
				const shift = 24 - (i * 8);
				inter[i] = 
					T0[(state[0] >>> shift) & 0xff] ^
					T1[(state[1] >>> shift) & 0xff] ^
					T2[(state[2] >>> shift) & 0xff] ^
					T3[(state[3] >>> shift) & 0xff] ^
					roundKeys[r][i];
			}
			for (let i = 0; i < 4; i++)
			{
				state[i] = inter[i];
			}
		}

		// Last round:
		for (let i = 0; i < 4; i++)
		{
			const shift = 24 - (i * 8);
			inter[i] = 
				(T0[(state[0] >>> shift) & 0xff] & 0xff000000) ^
				(T1[(state[1] >>> shift) & 0xff] & 0x00ff0000) ^
				(T2[(state[2] >>> shift) & 0xff] & 0x0000ff00) ^
				(T3[(state[3] >>> shift) & 0xff] & 0x000000ff) ^
				roundKeys[rounds][i];
		}

		dest.set(int32sToBytesBE(inter), destOffset);
	}
}


class AnubisEncryptTransform extends AnubisBaseTransform
{
	constructor()
	{
		super(false);
	}
}

class AnubisDecryptTransform extends AnubisBaseTransform
{
	constructor()
	{
		super(true);
	}

	// Invert key schedule for decryption:
	prepareRoundKeys(keyBytes, tables)
	{
		const [T0, T1, T2, T3, T4] = tables;

		const roundKeys = super.prepareRoundKeys(keyBytes, tables);
		const rounds = roundKeys.length - 1;
		// Reverse order of round keys:
		roundKeys.reverse();

		// Replace round keys 1 to N-1 with their inverted version:
		for (let r = 1; r < rounds; r++)
		{
			for (let i = 0; i < 4; i++)
			{
				const v = roundKeys[r][i];
				roundKeys[r][i] =
					T0[T4[(v >>> 24)       ] & 0xff] ^
					T1[T4[(v >>> 16) & 0xff] & 0xff] ^
					T2[T4[(v >>>  8) & 0xff] & 0xff] ^
					T3[T4[(v       ) & 0xff] & 0xff];
			}
		}

		return roundKeys;
	}
}

export {
	AnubisEncryptTransform,
	AnubisDecryptTransform,
	S_BOX,
	S_BOX_0
};