import { BlockCipherTransform } from "./block-cipher";
import { xorBytes } from "../../cryptopunk.bitarith";

const P = [
	0x29, 0x0d, 0x61, 0x40, 0x9c, 0xeb, 0x9e, 0x8f, 0x1f, 0x85, 0x5f, 0x58, 0x5b, 0x01, 0x39, 0x86,
	0x97, 0x2e, 0xd7, 0xd6, 0x35, 0xae, 0x17, 0x16, 0x21, 0xb6, 0x69, 0x4e, 0xa5, 0x72, 0x87, 0x08,
	0x3c, 0x18, 0xe6, 0xe7, 0xfa, 0xad, 0xb8, 0x89, 0xb7, 0x00, 0xf7, 0x6f, 0x73, 0x84, 0x11, 0x63,
	0x3f, 0x96, 0x7f, 0x6e, 0xbf, 0x14, 0x9d, 0xac, 0xa4, 0x0e, 0x7e, 0xf6, 0x20, 0x4a, 0x62, 0x30,
	0x03, 0xc5, 0x4b, 0x5a, 0x46, 0xa3, 0x44, 0x65, 0x7d, 0x4d, 0x3d, 0x42, 0x79, 0x49, 0x1b, 0x5c,
	0xf5, 0x6c, 0xb5, 0x94, 0x54, 0xff, 0x56, 0x57, 0x0b, 0xf4, 0x43, 0x0c, 0x4f, 0x70, 0x6d, 0x0a,
	0xe4, 0x02, 0x3e, 0x2f, 0xa2, 0x47, 0xe0, 0xc1, 0xd5, 0x1a, 0x95, 0xa7, 0x51, 0x5e, 0x33, 0x2b,
	0x5d, 0xd4, 0x1d, 0x2c, 0xee, 0x75, 0xec, 0xdd, 0x7c, 0x4c, 0xa6, 0xb4, 0x78, 0x48, 0x3a, 0x32,
	0x98, 0xaf, 0xc0, 0xe1, 0x2d, 0x09, 0x0f, 0x1e, 0xb9, 0x27, 0x8a, 0xe9, 0xbd, 0xe3, 0x9f, 0x07,
	0xb1, 0xea, 0x92, 0x93, 0x53, 0x6a, 0x31, 0x10, 0x80, 0xf2, 0xd8, 0x9b, 0x04, 0x36, 0x06, 0x8e,
	0xbe, 0xa9, 0x64, 0x45, 0x38, 0x1c, 0x7a, 0x6b, 0xf3, 0xa1, 0xf0, 0xcd, 0x37, 0x25, 0x15, 0x81,
	0xfb, 0x90, 0xe8, 0xd9, 0x7b, 0x52, 0x19, 0x28, 0x26, 0x88, 0xfc, 0xd1, 0xe2, 0x8c, 0xa0, 0x34,
	0x82, 0x67, 0xda, 0xcb, 0xc7, 0x41, 0xe5, 0xc4, 0xc8, 0xef, 0xdb, 0xc3, 0xcc, 0xab, 0xce, 0xed,
	0xd0, 0xbb, 0xd3, 0xd2, 0x71, 0x68, 0x13, 0x12, 0x9a, 0xb3, 0xc2, 0xca, 0xde, 0x77, 0xdc, 0xdf,
	0x66, 0x83, 0xbc, 0x8d, 0x60, 0xc6, 0x22, 0x23, 0xb2, 0x8b, 0x91, 0x05, 0x76, 0xcf, 0x74, 0xc9,
	0xaa, 0xf1, 0x99, 0xa8, 0x59, 0x50, 0x3b, 0x2a, 0xfe, 0xf9, 0x24, 0xb0, 0xba, 0xfd, 0xf8, 0x55
];

const C = [
	0x29,0x0d,0x61,0x40,0x9c,0xeb,0x9e,0x8f,
	0x1f,0x85,0x5f,0x58,0x5b,0x01,0x39,0x86,
	0x97,0x2e,0xd7,0xd6,0x35,0xae,0x17,0x16,
	0x21,0xb6,0x69,0x4e,0xa5,0x72,0x87,0x08,
	0x3c,0x18,0xe6,0xe7,0xfa,0xad,0xb8,0x89,
	0xb7,0x00,0xf7,0x6f,0x73,0x84,0x11,0x63,
	0x3f,0x96,0x7f,0x6e,0xbf,0x14,0x9d,0xac,
	0xa4,0x0e,0x7e,0xf6,0x20,0x4a,0x62,0x30,
	0x03,0xc5,0x4b,0x5a,0x46,0xa3,0x44,0x65
];

const C0 = [0xb7, 0xe1, 0x51, 0x62, 0x8a, 0xed, 0x2a, 0x6a];
const C1 = [0xbf, 0x71, 0x58, 0x80, 0x9c, 0xf4, 0xf3, 0xc7];

//const F = [0xf, 0xd, 0xb, 0xb, 0x7, 0x5, 0x7, 0x7, 0xe, 0xd, 0xa, 0xb, 0xe, 0xd, 0xe, 0xf];
//const G = [0xa, 0x6, 0x0, 0x2, 0xb, 0xe, 0x1, 0x8, 0xd, 0x4, 0x5, 0x3, 0xf, 0xc, 0x7, 0x9];

class CsCipherBaseTransform extends BlockCipherTransform
{
	constructor(decrypt)
	{
		super(decrypt);
	}

	transform(bytes, keyBytes)
	{
		this.checkBytesSize("Key", keyBytes, { min: 8, max: 128, step: 8 });

		const subKeys = this.generateSubKeys(keyBytes);

		return this.transformBlocks(bytes, 64, subKeys);
	}

	generateSubKeys(keyBytes)
	{
		const k = [];
		const temp = new Uint8Array(8);
		k[-2] = new Uint8Array(8);
		k[-1] = new Uint8Array(8);
		k[-1].set(keyBytes.subarray(0, 8));
		k[-2].set(keyBytes.subarray(8, 16));

		for (let i = 0; i < 9; i++)
		{
			temp.set(k[i - 1]);
			const K = k[i] = new Uint8Array(8);

			// XOR with constant:
			xorBytes(temp, C.slice(i * 8, i * 8 + 8));

			// Substitution:
			for (let j = 0; j < 8; j++)
			{
				temp[j] = P[temp[j]];
			}

			// Transpose 8x8 bit matrix:
			let bit = 0x80;
			for (let dest = 0; dest < 8; dest++)
			{
				for (let source = 0; source < 8; source++)
				{
					K[dest] <<= 1;
					K[dest] |= (temp[source] & bit) ? 1 : 0;
				}
				bit >>= 1;
			}
			xorBytes(K, k[i - 2]);
		}

		return k;
	}
}

class CsCipherEncryptTransform extends CsCipherBaseTransform
{
	constructor()
	{
		super(false);
	}

	transformBlock(block, dest, destOffset, subKeys)
	{
		const m = Uint8Array.from(block);

		let k = 0;
		for (let r = 0; r < 8; r++)
		{
			this.E(m, subKeys[k++]);
			this.E(m, C0);
			this.E(m, C1);
		}
		xorBytes(m, subKeys[k++]);

		dest.set(m, destOffset);
	}

	E(m, c)
	{
		xorBytes(m, c);
		for (let i = 0; i < 8; i += 2)
		{
			const xl = m[i];
			const xr = m[i + 1];
	
			const rl = ((xl << 1) | (xl >> 7)) & 0xff;
			const yl = P[(rl & 0x55) ^ xl ^ xr];
			const yr = P[rl ^ xr];
			
			m[i] = yl;
			m[i + 1] = yr;
		}
	
		let temp = m[4]; m[4] = m[1]; m[1] = m[2]; m[2] = temp;
		temp = m[3]; m[3] = m[6]; m[6] = m[5]; m[5] = temp;
	}
}

class CsCipherDecryptTransform extends CsCipherBaseTransform
{
	constructor()
	{
		super(true);
	}

	transformBlock(block, dest, destOffset, subKeys)
	{
		const m = Uint8Array.from(block);

		let k = subKeys.length - 1;
		xorBytes(m, subKeys[k--]);
		for (let r = 0; r < 8; r++)
		{
			this.D(m, C1);
			this.D(m, C0);
			this.D(m, subKeys[k--]);
		}

		dest.set(m, destOffset);
	}

	D(m, c)
	{
		let temp = m[5]; m[5] = m[6]; m[6] = m[3]; m[3] = temp;
		temp = m[2]; m[2] = m[1]; m[1] = m[4]; m[4] = temp;
	
		for (let i = 0; i < 8; i += 2)
		{
			const yl = m[i];
			const yr = m[i + 1];
	
			let xl = P[yl] ^ P[yr];
			xl = (((xl << 1) | (xl >> 7)) & 0xaa) ^ xl;
	
			const xr = ((xl << 1) | (xl >> 7)) ^ P[yr];
			
			m[i] = xl;
			m[i + 1] = xr;
		}
	
		xorBytes(m, c);
	}
}

export {
	CsCipherEncryptTransform,
	CsCipherDecryptTransform
};