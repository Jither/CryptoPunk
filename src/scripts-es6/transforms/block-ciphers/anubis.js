import { BlockCipherTransform } from "./block-cipher";
import { xorBytes } from "../../cryptopunk.bitarith";
import { gfMulTable } from "../../cryptopunk.galois";
import { matrixShiftMinor } from "../../cryptopunk.matrix-array";

const KEY_SIZES = [128, 160, 192, 224, 256, 288, 320];

const VARIANT_VALUES = [
	"anubis-0",
	"anubis"
];

const VARIANT_NAMES = [
	"Anubis-0",
	"Anubis"
];

// TODO: Precomputation of S-boxes

// Tweaked S-box:
const SBOX = [
	0xba, 0x54, 0x2f, 0x74, 0x53, 0xd3, 0xd2, 0x4d, 0x50, 0xac, 0x8d, 0xbf, 0x70, 0x52, 0x9a, 0x4c,
	0xea, 0xd5, 0x97, 0xd1, 0x33, 0x51, 0x5b, 0xa6, 0xde, 0x48, 0xa8, 0x99, 0xdb, 0x32, 0xb7, 0xfc,
	0xe3, 0x9e, 0x91, 0x9b, 0xe2, 0xbb, 0x41, 0x6e, 0xa5, 0xcb, 0x6b, 0x95, 0xa1, 0xf3, 0xb1, 0x02,
	0xcc, 0xc4, 0x1d, 0x14, 0xc3, 0x63, 0xda, 0x5d, 0x5f, 0xdc, 0x7d, 0xcd, 0x7f, 0x5a, 0x6c, 0x5c,
	0xf7, 0x26, 0xff, 0xed, 0xe8, 0x9d, 0x6f, 0x8e, 0x19, 0xa0, 0xf0, 0x89, 0x0f, 0x07, 0xaf, 0xfb,
	0x08, 0x15, 0x0d, 0x04, 0x01, 0x64, 0xdf, 0x76, 0x79, 0xdd, 0x3d, 0x16, 0x3f, 0x37, 0x6d, 0x38,
	0xb9, 0x73, 0xe9, 0x35, 0x55, 0x71, 0x7b, 0x8c, 0x72, 0x88, 0xf6, 0x2a, 0x3e, 0x5e, 0x27, 0x46,
	0x0c, 0x65, 0x68, 0x61, 0x03, 0xc1, 0x57, 0xd6, 0xd9, 0x58, 0xd8, 0x66, 0xd7, 0x3a, 0xc8, 0x3c,
	0xfa, 0x96, 0xa7, 0x98, 0xec, 0xb8, 0xc7, 0xae, 0x69, 0x4b, 0xab, 0xa9, 0x67, 0x0a, 0x47, 0xf2,
	0xb5, 0x22, 0xe5, 0xee, 0xbe, 0x2b, 0x81, 0x12, 0x83, 0x1b, 0x0e, 0x23, 0xf5, 0x45, 0x21, 0xce,
	0x49, 0x2c, 0xf9, 0xe6, 0xb6, 0x28, 0x17, 0x82, 0x1a, 0x8b, 0xfe, 0x8a, 0x09, 0xc9, 0x87, 0x4e,
	0xe1, 0x2e, 0xe4, 0xe0, 0xeb, 0x90, 0xa4, 0x1e, 0x85, 0x60, 0x00, 0x25, 0xf4, 0xf1, 0x94, 0x0b,
	0xe7, 0x75, 0xef, 0x34, 0x31, 0xd4, 0xd0, 0x86, 0x7e, 0xad, 0xfd, 0x29, 0x30, 0x3b, 0x9f, 0xf8,
	0xc6, 0x13, 0x06, 0x05, 0xc5, 0x11, 0x77, 0x7c, 0x7a, 0x78, 0x36, 0x1c, 0x39, 0x59, 0x18, 0x56,
	0xb3, 0xb0, 0x24, 0x20, 0xb2, 0x92, 0xa3, 0xc0, 0x44, 0x62, 0x10, 0xb4, 0x84, 0x43, 0x93, 0xc2,
	0x4a, 0xbd, 0x8f, 0x2d, 0xbc, 0x9c, 0x6a, 0x40, 0xcf, 0xa2, 0x80, 0x4f, 0x1f, 0xca, 0xaa, 0x42
];

// Original S-box:
const SBOX_0 = [
	0xa7, 0xd3, 0xe6, 0x71, 0xd0, 0xac, 0x4d, 0x79, 0x3a, 0xc9, 0x91, 0xfc, 0x1e, 0x47, 0x54, 0xbd,
	0x8c, 0xa5, 0x7a, 0xfb, 0x63, 0xb8, 0xdd, 0xd4, 0xe5, 0xb3, 0xc5, 0xbe, 0xa9, 0x88, 0x0c, 0xa2,
	0x39, 0xdf, 0x29, 0xda, 0x2b, 0xa8, 0xcb, 0x4c, 0x4b, 0x22, 0xaa, 0x24, 0x41, 0x70, 0xa6, 0xf9,
	0x5a, 0xe2, 0xb0, 0x36, 0x7d, 0xe4, 0x33, 0xff, 0x60, 0x20, 0x08, 0x8b, 0x5e, 0xab, 0x7f, 0x78,
	0x7c, 0x2c, 0x57, 0xd2, 0xdc, 0x6d, 0x7e, 0x0d, 0x53, 0x94, 0xc3, 0x28, 0x27, 0x06, 0x5f, 0xad,
	0x67, 0x5c, 0x55, 0x48, 0x0e, 0x52, 0xea, 0x42, 0x5b, 0x5d, 0x30, 0x58, 0x51, 0x59, 0x3c, 0x4e,
	0x38, 0x8a, 0x72, 0x14, 0xe7, 0xc6, 0xde, 0x50, 0x8e, 0x92, 0xd1, 0x77, 0x93, 0x45, 0x9a, 0xce,
	0x2d, 0x03, 0x62, 0xb6, 0xb9, 0xbf, 0x96, 0x6b, 0x3f, 0x07, 0x12, 0xae, 0x40, 0x34, 0x46, 0x3e,
	0xdb, 0xcf, 0xec, 0xcc, 0xc1, 0xa1, 0xc0, 0xd6, 0x1d, 0xf4, 0x61, 0x3b, 0x10, 0xd8, 0x68, 0xa0,
	0xb1, 0x0a, 0x69, 0x6c, 0x49, 0xfa, 0x76, 0xc4, 0x9e, 0x9b, 0x6e, 0x99, 0xc2, 0xb7, 0x98, 0xbc,
	0x8f, 0x85, 0x1f, 0xb4, 0xf8, 0x11, 0x2e, 0x00, 0x25, 0x1c, 0x2a, 0x3d, 0x05, 0x4f, 0x7b, 0xb2,
	0x32, 0x90, 0xaf, 0x19, 0xa3, 0xf7, 0x73, 0x9d, 0x15, 0x74, 0xee, 0xca, 0x9f, 0x0f, 0x1b, 0x75,
	0x86, 0x84, 0x9c, 0x4a, 0x97, 0x1a, 0x65, 0xf6, 0xed, 0x09, 0xbb, 0x26, 0x83, 0xeb, 0x6f, 0x81,
	0x04, 0x6a, 0x43, 0x01, 0x17, 0xe1, 0x87, 0xf5, 0x8d, 0xe3, 0x23, 0x80, 0x44, 0x16, 0x66, 0x21,
	0xfe, 0xd5, 0x31, 0xd9, 0x35, 0x18, 0x02, 0x64, 0xf2, 0xf1, 0x56, 0xcd, 0x82, 0xc8, 0xba, 0xf0,
	0xef, 0xe9, 0xe8, 0xfd, 0x89, 0xd7, 0xc7, 0xb5, 0xa4, 0x2f, 0x95, 0x13, 0x0b, 0xf3, 0xe0, 0x37
];

const SBOXES = {
	"anubis-0": SBOX_0,
	"anubis": SBOX
};

const ANUBIS_POLYNOMIAL = 0x11d;

// GF(2^8) multiplication tables:
let MUL2, MUL4, MUL6, MUL8;

// Precalculates GF(2^8) multiplication tables
function precompute()
{
	if (MUL2)
	{
		return;
	}
	MUL2 = gfMulTable(2, ANUBIS_POLYNOMIAL);
	MUL4 = gfMulTable(4, ANUBIS_POLYNOMIAL);
	MUL6 = gfMulTable(6, ANUBIS_POLYNOMIAL);
	MUL8 = gfMulTable(8, ANUBIS_POLYNOMIAL);
}

// Internally, Anubis' key and state are viewed as Nx4 matrices, where the byte array
// is mapped to the matrix: b[i,j] = a[4 * i + j]
//
// In other words, row-major order:
// [00 01 02 03]
// [04 05 06 07]
// [08 09 10 11]
// [12 13 14 15]
// [16 17 18 19]
// ...
// Note that this is the opposite mapping of Rijndael (4xN, column-major)

// Nonlinear layer γ ("SubBytes")
function subBytes(state, sbox)
{
	// Substitute using S-box:
	for (let i = 0; i < state.length; i++)
	{
		state[i] = sbox[state[i]];
	}
}

// Transposition τ (Transpose matrix)
// This is only used for the round function (square matrix)
// π essentially takes its place in the key schedule
function transpose(state)
{
	// TODO: general utility function
	// Transpose matrix:
	[state[1], state[4]] = [state[4], state[1]];
	[state[2], state[8]] = [state[8], state[2]];
	[state[3], state[12]] = [state[12], state[3]];
	[state[6], state[9]] = [state[9], state[6]];
	[state[7], state[13]] = [state[13], state[7]];
	[state[11], state[14]] = [state[14], state[11]];
}

// Linear diffusion θ
function mixRows(state, rows)
{
	// Multiply (in GF(2^8)) by:
	// [01 02 04 06]
	// [02 01 06 04]
	// [04 06 01 02]
	// [06 04 02 01]
	let index = 0;
	for (let row = 0; row < rows; row++)
	{
		const
			a0 = state[index],
			a1 = state[index + 1],
			a2 = state[index + 2],
			a3 = state[index + 3];

		state[index++] =      a0  ^ MUL2[a1] ^ MUL4[a2] ^ MUL6[a3];
		state[index++] = MUL2[a0] ^      a1  ^ MUL6[a2] ^ MUL4[a3];
		state[index++] = MUL4[a0] ^ MUL6[a1] ^      a2  ^ MUL2[a3];
		state[index++] = MUL6[a0] ^ MUL4[a1] ^ MUL2[a2] ^      a3 ;
	}
}

// Cyclical permutation π ("ShiftColumns")
// Rotate each column, j, down by j positions
// From a byte array perspective, this "ShiftColumns" operation is equivalent to Rijndael's ShiftRows, since
// columns and rows of the state are "swapped" in Anubis compared to Rijndael.
// The only difference is that the shift is "positive" (down rather than left), and the shift amounts are
// fixed for each column.
function shiftColumns(state, rows)
{
	for (let col = 1; col < 4; col++)
	{
		matrixShiftMinor(state, rows, 4, col, col);
	}
}

// Key extraction ω
// Converts Nx4 key state matrix to 4x4 through a linear mapping:
// [ 01    01    01    01    01 ..  01       ]
// [ 01    02    02^2  02^3  02^4   02^(N-1) ] * K
// [ 01    06    06^2  06^3  06^4   06^(N-1) ]
// [ 01    08    08^2  08^3  08^4   08^(N-1) ]
function extractKey(state, rows)
{
	// TODO: Inplace?
	const k = new Uint8Array(16);
	for (let row = rows - 1; row >= 0; row--)
	{
		for (let r = 0; r < 4; r++)
		{
			const a = state[row * 4 + r];
			k[r     ] ^= a;
			k[r +  4] = MUL2[k[r +  4]] ^ a;
			k[r +  8] = MUL6[k[r +  8]] ^ a;
			k[r + 12] = MUL8[k[r + 12]] ^ a;
		}
	}
	return k;
}

class AnubisBaseTransform extends BlockCipherTransform
{
	constructor(decrypt)
	{
		super(decrypt);
		this.addOption("variant", "Variant", "anubis", { type: "select", values: VARIANT_VALUES, texts: VARIANT_NAMES });
	}

	transform(bytes, keyBytes)
	{
		precompute();

		// TODO: Cache keys
		this.checkBytesSize("Key", keyBytes, KEY_SIZES);

		const roundKeys = this.prepareRoundKeys(keyBytes);

		return this.transformBlocks(bytes, 128, roundKeys);
	}

	prepareRoundKeys(keyBytes)
	{
		const sbox = SBOXES[this.options.variant];
		const rows = keyBytes.length / 4;

		const rounds = 8 + rows;

		const k = new Array(rounds + 1);
		k[0] = Uint8Array.from(keyBytes);
		
		// Key evolutions ψ[cr]
		for (let r = 1; r < k.length; r++)
		{
			k[r] = Uint8Array.from(k[r - 1]);
			subBytes(k[r], sbox);
			shiftColumns(k[r], rows);
			mixRows(k[r], rows);

			// Round constant addition σ[cr]
			for (let j = 0; j < 4; j++)
			{
				const cr = sbox[4 * (r - 1) + j];
				k[r][j] ^= cr;
			}
		}
		
		// Key selections φ
		for (let r = 0; r < k.length; r++)
		{
			subBytes(k[r], sbox);
			// TODO: Inplace?
			k[r] = extractKey(k[r], rows);
			transpose(k[r]);
		}

		return k;
	}

	transformBlock(block, dest, destOffset, roundKeys)
	{
		const state = Uint8Array.from(block);
		const sbox = SBOXES[this.options.variant];

		const rounds = roundKeys.length - 1;

		// Key addition σ[K0]
		xorBytes(state, roundKeys[0]);

		// N-1 rounds:
		for (let r = 1; r < rounds; r++)
		{
			subBytes(state, sbox);
			transpose(state);
			mixRows(state, 4);
			xorBytes(state, roundKeys[r]);
		}

		// Last round:
		subBytes(state, sbox);
		transpose(state);
		xorBytes(state, roundKeys[rounds]);

		dest.set(state, destOffset);
	}
}


class AnubisEncryptTransform extends AnubisBaseTransform
{
	constructor()
	{
		super(false);
	}
}

class AnubisDecryptTransform extends AnubisBaseTransform
{
	constructor()
	{
		super(true);
	}

	// Invert key schedule for decryption:
	prepareRoundKeys(keyBytes)
	{
		const roundKeys = super.prepareRoundKeys(keyBytes);
		const rows = keyBytes.length / 4;
		const rounds = roundKeys.length - 1;

		// Replace RK 1 to N-1 with θ(RK):
		for (let r = 1; r < rounds; r++)
		{
			mixRows(roundKeys[r], rows);
		}

		// Reverse order of round keys:
		roundKeys.reverse();

		return roundKeys;
	}
}

export {
	AnubisEncryptTransform,
	AnubisDecryptTransform,
	SBOX,
	SBOX_0
};