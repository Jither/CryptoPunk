import { BlockCipherTransform } from "./block-cipher";
import { matrixShiftMinor } from "../../cryptopunk.matrix-array";
import { gfMulTable } from "../../cryptopunk.galois";
import { xorBytes, rolBytes } from "../../cryptopunk.bitarith";

const BLOCK_SIZES = [128, 256, 512];

// "Key length can be either equal or double of the block size"
const KEY_SIZES_BY_BLOCK_SIZE = {
	128: [128, 256],
	256: [256, 512],
	512: [512]
};

const RECOMMENDED_ROUND_COUNTS = {
	128: 10,
	256: 14,
	512: 18
};

const MAX_ROUNDS = 32;
const ROUND_COUNTS = [];
const ROUND_COUNT_NAMES = [];

function setupRoundChoices()
{
	ROUND_COUNTS.push(0);
	ROUND_COUNT_NAMES.push("Recommended");
	// At least 2 rounds:
	for (let i = 2; i <= MAX_ROUNDS; i++)
	{
		ROUND_COUNTS.push(i);
		ROUND_COUNT_NAMES.push(i.toString());
	}
}

setupRoundChoices();

const KALYNA_POLYNOMIAL = 0x11d;

const SBOX_0 = [
	0xa8, 0x43, 0x5f, 0x06, 0x6b, 0x75, 0x6c, 0x59, 0x71, 0xdf, 0x87, 0x95, 0x17, 0xf0, 0xd8, 0x09,
	0x6d, 0xf3, 0x1d, 0xcb, 0xc9, 0x4d, 0x2c, 0xaf, 0x79, 0xe0, 0x97, 0xfd, 0x6f, 0x4b, 0x45, 0x39,
	0x3e, 0xdd, 0xa3, 0x4f, 0xb4, 0xb6, 0x9a, 0x0e, 0x1f, 0xbf, 0x15, 0xe1, 0x49, 0xd2, 0x93, 0xc6,
	0x92, 0x72, 0x9e, 0x61, 0xd1, 0x63, 0xfa, 0xee, 0xf4, 0x19, 0xd5, 0xad, 0x58, 0xa4, 0xbb, 0xa1,
	0xdc, 0xf2, 0x83, 0x37, 0x42, 0xe4, 0x7a, 0x32, 0x9c, 0xcc, 0xab, 0x4a, 0x8f, 0x6e, 0x04, 0x27,
	0x2e, 0xe7, 0xe2, 0x5a, 0x96, 0x16, 0x23, 0x2b, 0xc2, 0x65, 0x66, 0x0f, 0xbc, 0xa9, 0x47, 0x41,
	0x34, 0x48, 0xfc, 0xb7, 0x6a, 0x88, 0xa5, 0x53, 0x86, 0xf9, 0x5b, 0xdb, 0x38, 0x7b, 0xc3, 0x1e,
	0x22, 0x33, 0x24, 0x28, 0x36, 0xc7, 0xb2, 0x3b, 0x8e, 0x77, 0xba, 0xf5, 0x14, 0x9f, 0x08, 0x55,
	0x9b, 0x4c, 0xfe, 0x60, 0x5c, 0xda, 0x18, 0x46, 0xcd, 0x7d, 0x21, 0xb0, 0x3f, 0x1b, 0x89, 0xff,
	0xeb, 0x84, 0x69, 0x3a, 0x9d, 0xd7, 0xd3, 0x70, 0x67, 0x40, 0xb5, 0xde, 0x5d, 0x30, 0x91, 0xb1,
	0x78, 0x11, 0x01, 0xe5, 0x00, 0x68, 0x98, 0xa0, 0xc5, 0x02, 0xa6, 0x74, 0x2d, 0x0b, 0xa2, 0x76,
	0xb3, 0xbe, 0xce, 0xbd, 0xae, 0xe9, 0x8a, 0x31, 0x1c, 0xec, 0xf1, 0x99, 0x94, 0xaa, 0xf6, 0x26,
	0x2f, 0xef, 0xe8, 0x8c, 0x35, 0x03, 0xd4, 0x7f, 0xfb, 0x05, 0xc1, 0x5e, 0x90, 0x20, 0x3d, 0x82,
	0xf7, 0xea, 0x0a, 0x0d, 0x7e, 0xf8, 0x50, 0x1a, 0xc4, 0x07, 0x57, 0xb8, 0x3c, 0x62, 0xe3, 0xc8,
	0xac, 0x52, 0x64, 0x10, 0xd0, 0xd9, 0x13, 0x0c, 0x12, 0x29, 0x51, 0xb9, 0xcf, 0xd6, 0x73, 0x8d,
	0x81, 0x54, 0xc0, 0xed, 0x4e, 0x44, 0xa7, 0x2a, 0x85, 0x25, 0xe6, 0xca, 0x7c, 0x8b, 0x56, 0x80
];

const SBOX_1 = [
	0xce, 0xbb, 0xeb, 0x92, 0xea, 0xcb, 0x13, 0xc1, 0xe9, 0x3a, 0xd6, 0xb2, 0xd2, 0x90, 0x17, 0xf8,
	0x42, 0x15, 0x56, 0xb4, 0x65, 0x1c, 0x88, 0x43, 0xc5, 0x5c, 0x36, 0xba, 0xf5, 0x57, 0x67, 0x8d,
	0x31, 0xf6, 0x64, 0x58, 0x9e, 0xf4, 0x22, 0xaa, 0x75, 0x0f, 0x02, 0xb1, 0xdf, 0x6d, 0x73, 0x4d,
	0x7c, 0x26, 0x2e, 0xf7, 0x08, 0x5d, 0x44, 0x3e, 0x9f, 0x14, 0xc8, 0xae, 0x54, 0x10, 0xd8, 0xbc,
	0x1a, 0x6b, 0x69, 0xf3, 0xbd, 0x33, 0xab, 0xfa, 0xd1, 0x9b, 0x68, 0x4e, 0x16, 0x95, 0x91, 0xee,
	0x4c, 0x63, 0x8e, 0x5b, 0xcc, 0x3c, 0x19, 0xa1, 0x81, 0x49, 0x7b, 0xd9, 0x6f, 0x37, 0x60, 0xca,
	0xe7, 0x2b, 0x48, 0xfd, 0x96, 0x45, 0xfc, 0x41, 0x12, 0x0d, 0x79, 0xe5, 0x89, 0x8c, 0xe3, 0x20,
	0x30, 0xdc, 0xb7, 0x6c, 0x4a, 0xb5, 0x3f, 0x97, 0xd4, 0x62, 0x2d, 0x06, 0xa4, 0xa5, 0x83, 0x5f,
	0x2a, 0xda, 0xc9, 0x00, 0x7e, 0xa2, 0x55, 0xbf, 0x11, 0xd5, 0x9c, 0xcf, 0x0e, 0x0a, 0x3d, 0x51,
	0x7d, 0x93, 0x1b, 0xfe, 0xc4, 0x47, 0x09, 0x86, 0x0b, 0x8f, 0x9d, 0x6a, 0x07, 0xb9, 0xb0, 0x98,
	0x18, 0x32, 0x71, 0x4b, 0xef, 0x3b, 0x70, 0xa0, 0xe4, 0x40, 0xff, 0xc3, 0xa9, 0xe6, 0x78, 0xf9,
	0x8b, 0x46, 0x80, 0x1e, 0x38, 0xe1, 0xb8, 0xa8, 0xe0, 0x0c, 0x23, 0x76, 0x1d, 0x25, 0x24, 0x05,
	0xf1, 0x6e, 0x94, 0x28, 0x9a, 0x84, 0xe8, 0xa3, 0x4f, 0x77, 0xd3, 0x85, 0xe2, 0x52, 0xf2, 0x82,
	0x50, 0x7a, 0x2f, 0x74, 0x53, 0xb3, 0x61, 0xaf, 0x39, 0x35, 0xde, 0xcd, 0x1f, 0x99, 0xac, 0xad,
	0x72, 0x2c, 0xdd, 0xd0, 0x87, 0xbe, 0x5e, 0xa6, 0xec, 0x04, 0xc6, 0x03, 0x34, 0xfb, 0xdb, 0x59,
	0xb6, 0xc2, 0x01, 0xf0, 0x5a, 0xed, 0xa7, 0x66, 0x21, 0x7f, 0x8a, 0x27, 0xc7, 0xc0, 0x29, 0xd7
];

const SBOX_2 = [
	0x93, 0xd9, 0x9a, 0xb5, 0x98, 0x22, 0x45, 0xfc, 0xba, 0x6a, 0xdf, 0x02, 0x9f, 0xdc, 0x51, 0x59,
	0x4a, 0x17, 0x2b, 0xc2, 0x94, 0xf4, 0xbb, 0xa3, 0x62, 0xe4, 0x71, 0xd4, 0xcd, 0x70, 0x16, 0xe1,
	0x49, 0x3c, 0xc0, 0xd8, 0x5c, 0x9b, 0xad, 0x85, 0x53, 0xa1, 0x7a, 0xc8, 0x2d, 0xe0, 0xd1, 0x72,
	0xa6, 0x2c, 0xc4, 0xe3, 0x76, 0x78, 0xb7, 0xb4, 0x09, 0x3b, 0x0e, 0x41, 0x4c, 0xde, 0xb2, 0x90,
	0x25, 0xa5, 0xd7, 0x03, 0x11, 0x00, 0xc3, 0x2e, 0x92, 0xef, 0x4e, 0x12, 0x9d, 0x7d, 0xcb, 0x35,
	0x10, 0xd5, 0x4f, 0x9e, 0x4d, 0xa9, 0x55, 0xc6, 0xd0, 0x7b, 0x18, 0x97, 0xd3, 0x36, 0xe6, 0x48,
	0x56, 0x81, 0x8f, 0x77, 0xcc, 0x9c, 0xb9, 0xe2, 0xac, 0xb8, 0x2f, 0x15, 0xa4, 0x7c, 0xda, 0x38,
	0x1e, 0x0b, 0x05, 0xd6, 0x14, 0x6e, 0x6c, 0x7e, 0x66, 0xfd, 0xb1, 0xe5, 0x60, 0xaf, 0x5e, 0x33,
	0x87, 0xc9, 0xf0, 0x5d, 0x6d, 0x3f, 0x88, 0x8d, 0xc7, 0xf7, 0x1d, 0xe9, 0xec, 0xed, 0x80, 0x29,
	0x27, 0xcf, 0x99, 0xa8, 0x50, 0x0f, 0x37, 0x24, 0x28, 0x30, 0x95, 0xd2, 0x3e, 0x5b, 0x40, 0x83,
	0xb3, 0x69, 0x57, 0x1f, 0x07, 0x1c, 0x8a, 0xbc, 0x20, 0xeb, 0xce, 0x8e, 0xab, 0xee, 0x31, 0xa2,
	0x73, 0xf9, 0xca, 0x3a, 0x1a, 0xfb, 0x0d, 0xc1, 0xfe, 0xfa, 0xf2, 0x6f, 0xbd, 0x96, 0xdd, 0x43,
	0x52, 0xb6, 0x08, 0xf3, 0xae, 0xbe, 0x19, 0x89, 0x32, 0x26, 0xb0, 0xea, 0x4b, 0x64, 0x84, 0x82,
	0x6b, 0xf5, 0x79, 0xbf, 0x01, 0x5f, 0x75, 0x63, 0x1b, 0x23, 0x3d, 0x68, 0x2a, 0x65, 0xe8, 0x91,
	0xf6, 0xff, 0x13, 0x58, 0xf1, 0x47, 0x0a, 0x7f, 0xc5, 0xa7, 0xe7, 0x61, 0x5a, 0x06, 0x46, 0x44,
	0x42, 0x04, 0xa0, 0xdb, 0x39, 0x86, 0x54, 0xaa, 0x8c, 0x34, 0x21, 0x8b, 0xf8, 0x0c, 0x74, 0x67
];

const SBOX_3 = [
	0x68, 0x8d, 0xca, 0x4d, 0x73, 0x4b, 0x4e, 0x2a, 0xd4, 0x52, 0x26, 0xb3, 0x54, 0x1e, 0x19, 0x1f,
	0x22, 0x03, 0x46, 0x3d, 0x2d, 0x4a, 0x53, 0x83, 0x13, 0x8a, 0xb7, 0xd5, 0x25, 0x79, 0xf5, 0xbd,
	0x58, 0x2f, 0x0d, 0x02, 0xed, 0x51, 0x9e, 0x11, 0xf2, 0x3e, 0x55, 0x5e, 0xd1, 0x16, 0x3c, 0x66,
	0x70, 0x5d, 0xf3, 0x45, 0x40, 0xcc, 0xe8, 0x94, 0x56, 0x08, 0xce, 0x1a, 0x3a, 0xd2, 0xe1, 0xdf,
	0xb5, 0x38, 0x6e, 0x0e, 0xe5, 0xf4, 0xf9, 0x86, 0xe9, 0x4f, 0xd6, 0x85, 0x23, 0xcf, 0x32, 0x99,
	0x31, 0x14, 0xae, 0xee, 0xc8, 0x48, 0xd3, 0x30, 0xa1, 0x92, 0x41, 0xb1, 0x18, 0xc4, 0x2c, 0x71,
	0x72, 0x44, 0x15, 0xfd, 0x37, 0xbe, 0x5f, 0xaa, 0x9b, 0x88, 0xd8, 0xab, 0x89, 0x9c, 0xfa, 0x60,
	0xea, 0xbc, 0x62, 0x0c, 0x24, 0xa6, 0xa8, 0xec, 0x67, 0x20, 0xdb, 0x7c, 0x28, 0xdd, 0xac, 0x5b,
	0x34, 0x7e, 0x10, 0xf1, 0x7b, 0x8f, 0x63, 0xa0, 0x05, 0x9a, 0x43, 0x77, 0x21, 0xbf, 0x27, 0x09,
	0xc3, 0x9f, 0xb6, 0xd7, 0x29, 0xc2, 0xeb, 0xc0, 0xa4, 0x8b, 0x8c, 0x1d, 0xfb, 0xff, 0xc1, 0xb2,
	0x97, 0x2e, 0xf8, 0x65, 0xf6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xe4, 0xd9, 0xb9, 0xd0, 0x42, 0xc7,
	0x6c, 0x90, 0x00, 0x8e, 0x6f, 0x50, 0x01, 0xc5, 0xda, 0x47, 0x3f, 0xcd, 0x69, 0xa2, 0xe2, 0x7a,
	0xa7, 0xc6, 0x93, 0x0f, 0x0a, 0x06, 0xe6, 0x2b, 0x96, 0xa3, 0x1c, 0xaf, 0x6a, 0x12, 0x84, 0x39,
	0xe7, 0xb0, 0x82, 0xf7, 0xfe, 0x9d, 0x87, 0x5c, 0x81, 0x35, 0xde, 0xb4, 0xa5, 0xfc, 0x80, 0xef,
	0xcb, 0xbb, 0x6b, 0x76, 0xba, 0x5a, 0x7d, 0x78, 0x0b, 0x95, 0xe3, 0xad, 0x74, 0x98, 0x3b, 0x36,
	0x64, 0x6d, 0xdc, 0xf0, 0x59, 0xa9, 0x4c, 0x17, 0x7f, 0x91, 0xb8, 0xc9, 0x57, 0x1b, 0xe0, 0x61
];

const SBOXES = [SBOX_0, SBOX_1, SBOX_2, SBOX_3];
const ISBOXES = [];

let MUL4, MUL5, MUL6, MUL7, MUL8,
	MUL2f, MUL49, MUL76, MUL95, MULa8, MULad, MULca, MULd7;

function precompute()
{
	if (MUL4)
	{
		return;
	}

	MUL4 = gfMulTable(4, KALYNA_POLYNOMIAL);
	MUL5 = gfMulTable(5, KALYNA_POLYNOMIAL);
	MUL6 = gfMulTable(6, KALYNA_POLYNOMIAL);
	MUL7 = gfMulTable(7, KALYNA_POLYNOMIAL);
	MUL8 = gfMulTable(8, KALYNA_POLYNOMIAL);

	MUL2f = gfMulTable(0x2f, KALYNA_POLYNOMIAL);
	MUL49 = gfMulTable(0x49, KALYNA_POLYNOMIAL);
	MUL76 = gfMulTable(0x76, KALYNA_POLYNOMIAL);
	MUL95 = gfMulTable(0x95, KALYNA_POLYNOMIAL);
	MULa8 = gfMulTable(0xa8, KALYNA_POLYNOMIAL);
	MULad = gfMulTable(0xad, KALYNA_POLYNOMIAL);
	MULca = gfMulTable(0xca, KALYNA_POLYNOMIAL);
	MULd7 = gfMulTable(0xd7, KALYNA_POLYNOMIAL);
	
	for (let i = 0; i < SBOXES.length; i++)
	{
		const sbox = SBOXES[i];
		const isbox = new Uint8Array(256);
		for (let j = 0; j < 256; j++)
		{
			isbox[sbox[j]] = j;
		}
		ISBOXES.push(isbox);
	}
}

// (Little Endian) Addition modulo 2^64 η
function addKey(state, key)
{
	for (let start = 0; start < state.length; start += 8)
	{
		let carry = 0;
		for (let i = start; i < start + 8; i++)
		{
			let value = state[i] + key[i] + carry;
			carry = value > 255 ? 1 : 0;
			value &= 0xff;
			state[i] = value;
		}
	}
}

// (Little Endian) Subtraction modulo 2^64 η
function invAddKey(state, key)
{
	for (let start = 0; start < state.length; start += 8)
	{
		let borrow = 0;
		for (let i = start; i < start + 8; i++)
		{
			let value = state[i] - key[i] - borrow;
			borrow = value < 0 ? 1 : 0;
			value &= 0xff;
			state[i] = value;
		}
	}
}

function addKeyPhi(state, key, round)
{
	const r = round / 2;
	const theta = new Uint8Array(state.length);
	for (let i = 0; i < theta.length; i++)
	{
		theta[i] = (i & 1) ? 0 : 1;
	}
	rolBytes(theta, r);
	addKey(theta, key);
	addKey(state, theta);
}

function xorKeyPhi(state, key, round)
{
	const r = round / 2;
	const theta = new Uint8Array(state.length);
	for (let i = 0; i < theta.length; i++)
	{
		theta[i] = (i & 1) ? 0 : 1;
	}
	rolBytes(theta, r);
	addKey(theta, key);
	xorBytes(state, theta);
}

// Non-linear bijective mapping π'
function subBytes(state)
{
	for (let i = 0; i < state.length; i++)
	{
		const sbox = SBOXES[i % 4];
		state[i] = sbox[state[i]];
	}
}

// Non-linear bijective mapping π'
function invSubBytes(state)
{
	for (let i = 0; i < state.length; i++)
	{
		const sbox = ISBOXES[i % 4];
		state[i] = sbox[state[i]];
	}
}

// Permutation τ
function shiftRows(state)
{
	const shiftsPerRow = state.length / 64;
	const columns = state.length / 8;
	for (let row = 0; row < 8; row++)
	{
		matrixShiftMinor(state, columns, 8, row, Math.floor(row * shiftsPerRow));
	}
}

// Permutation τ
function invShiftRows(state)
{
	const shiftsPerRow = state.length / 64;
	const columns = state.length / 8;
	for (let row = 0; row < 8; row++)
	{
		matrixShiftMinor(state, columns, 8, row, -Math.floor(row * shiftsPerRow));
	}
}

// Linear transformation ψ
function mixColumns(state)
{
	const columns = state.length / 8;
	
	let index = 0;
	for (let col = 0; col < columns; col++)
	{
		const
			a0 = state[index],
			a1 = state[index + 1],
			a2 = state[index + 2],
			a3 = state[index + 3],
			a4 = state[index + 4],
			a5 = state[index + 5],
			a6 = state[index + 6],
			a7 = state[index + 7];

		state[index++] =      a0  ^      a1  ^ MUL5[a2] ^      a3  ^ MUL8[a4] ^ MUL6[a5] ^ MUL7[a6] ^ MUL4[a7];
		state[index++] = MUL4[a0] ^      a1  ^      a2  ^ MUL5[a3] ^      a4  ^ MUL8[a5] ^ MUL6[a6] ^ MUL7[a7];
		state[index++] = MUL7[a0] ^ MUL4[a1] ^      a2  ^      a3  ^ MUL5[a4] ^      a5  ^ MUL8[a6] ^ MUL6[a7];
		state[index++] = MUL6[a0] ^ MUL7[a1] ^ MUL4[a2] ^      a3  ^      a4  ^ MUL5[a5] ^      a6  ^ MUL8[a7];
		state[index++] = MUL8[a0] ^ MUL6[a1] ^ MUL7[a2] ^ MUL4[a3] ^      a4  ^      a5  ^ MUL5[a6] ^      a7 ;
		state[index++] =      a0  ^ MUL8[a1] ^ MUL6[a2] ^ MUL7[a3] ^ MUL4[a4] ^      a5  ^      a6  ^ MUL5[a7];
		state[index++] = MUL5[a0] ^      a1  ^ MUL8[a2] ^ MUL6[a3] ^ MUL7[a4] ^ MUL4[a5] ^      a6  ^      a7 ;
		state[index++] =      a0  ^ MUL5[a1] ^      a2  ^ MUL8[a3] ^ MUL6[a4] ^ MUL7[a5] ^ MUL4[a6] ^      a7 ;
	}
}

// Linear transformation ψ
function invMixColumns(state)
{
	const columns = state.length / 8;
	
	let index = 0;
	for (let col = 0; col < columns; col++)
	{
		const
			a0 = state[index],
			a1 = state[index + 1],
			a2 = state[index + 2],
			a3 = state[index + 3],
			a4 = state[index + 4],
			a5 = state[index + 5],
			a6 = state[index + 6],
			a7 = state[index + 7];

		state[index++] = MULad[a0] ^ MUL95[a1] ^ MUL76[a2] ^ MULa8[a3] ^ MUL2f[a4] ^ MUL49[a5] ^ MULd7[a6] ^ MULca[a7];
		state[index++] = MULca[a0] ^ MULad[a1] ^ MUL95[a2] ^ MUL76[a3] ^ MULa8[a4] ^ MUL2f[a5] ^ MUL49[a6] ^ MULd7[a7];
		state[index++] = MULd7[a0] ^ MULca[a1] ^ MULad[a2] ^ MUL95[a3] ^ MUL76[a4] ^ MULa8[a5] ^ MUL2f[a6] ^ MUL49[a7];
		state[index++] = MUL49[a0] ^ MULd7[a1] ^ MULca[a2] ^ MULad[a3] ^ MUL95[a4] ^ MUL76[a5] ^ MULa8[a6] ^ MUL2f[a7];
		state[index++] = MUL2f[a0] ^ MUL49[a1] ^ MULd7[a2] ^ MULca[a3] ^ MULad[a4] ^ MUL95[a5] ^ MUL76[a6] ^ MULa8[a7];
		state[index++] = MULa8[a0] ^ MUL2f[a1] ^ MUL49[a2] ^ MULd7[a3] ^ MULca[a4] ^ MULad[a5] ^ MUL95[a6] ^ MUL76[a7];
		state[index++] = MUL76[a0] ^ MULa8[a1] ^ MUL2f[a2] ^ MUL49[a3] ^ MULd7[a4] ^ MULca[a5] ^ MULad[a6] ^ MUL95[a7];
		state[index++] = MUL95[a0] ^ MUL76[a1] ^ MULa8[a2] ^ MUL2f[a3] ^ MUL49[a4] ^ MULd7[a5] ^ MULca[a6] ^ MULad[a7];
	}
}

class KalynaTransform extends BlockCipherTransform
{
	constructor(decrypt)
	{
		super(decrypt);
		this.addOption("blockSize", "Block size", 128, { type: "select", texts: BLOCK_SIZES })
			.addOption("rounds", "Rounds", 0, { type: "select", texts: ROUND_COUNT_NAMES, values: ROUND_COUNTS });
	}

	transform(bytes, keyBytes)
	{
		precompute();
		const blockSize = this.options.blockSize;

		this.checkSize("Block size", blockSize, BLOCK_SIZES);
		this.checkBytesSize("Key", keyBytes, KEY_SIZES_BY_BLOCK_SIZE[blockSize]);

		let rounds = this.options.rounds;
		if (rounds === 0)
		{
			// Get recommended round count based on key size or block size (higher size decides):
			rounds = RECOMMENDED_ROUND_COUNTS[keyBytes.length * 8];
		}

		const roundKeys = this.cacheKeys(
			"Kalyna",
			() => this.prepareRoundKeys(keyBytes, blockSize, rounds),
			keyBytes,
			blockSize,
			rounds
		);

		return this.transformBlocks(bytes, blockSize, roundKeys);
	}

	prepareRoundKeys(keyBytes, blockSize, rounds)
	{
		const blockLength = blockSize / 8;
		
		const keyLength = keyBytes.length;
		const keySize = keyLength * 8;

		let left, right;
		if (blockLength === keyLength)
		{
			left = keyBytes;
			right = keyBytes;
		}
		else
		{
			// Key is twice the size of block
			left = keyBytes.subarray(0, blockLength);
			right = keyBytes.subarray(blockLength);
		}
		
		const iKey = new Uint8Array(blockLength);
		iKey[0] = (keySize + blockSize + 64) / 64;
		
		addKey(iKey, left);
		subBytes(iKey);
		shiftRows(iKey);
		mixColumns(iKey);

		xorBytes(iKey, right);
		subBytes(iKey);
		shiftRows(iKey);
		mixColumns(iKey);

		addKey(iKey, left);
		subBytes(iKey);
		shiftRows(iKey);
		mixColumns(iKey);

		const keys = new Array(rounds + 1);

		const temp = new Uint8Array(keyLength);
		for (let r = 0; r < rounds + 1; r++)
		{
			if ((r & 1) === 0)
			{
				let k;
				if (blockLength === keyLength)
				{
					k = Uint8Array.from(keyBytes);
					rolBytes(k, r * 32);
				}
				// Key is twice the size of block
				else
				{
					k = new Uint8Array(blockLength);
					if (r % 4 === 0)
					{
						// Use left end of key rotated right 16 bits per round
						const shiftLength = 16 * r;
						temp.set(keyBytes);
						rolBytes(temp, shiftLength);
						k.set(temp.subarray(0, blockLength));
					}
					else
					{
						// Use right end of key rotated right 64 bits per 4 rounds
						const shiftLength = 64 * Math.floor(r / 4);
						temp.set(keyBytes);
						rolBytes(temp, shiftLength);
						k.set(temp.subarray(blockLength, keyLength));
					}
				}

				addKeyPhi(k, iKey, r);
				subBytes(k);
				shiftRows(k);
				mixColumns(k);

				xorKeyPhi(k, iKey, r);
				subBytes(k);
				shiftRows(k);
				mixColumns(k);

				addKeyPhi(k, iKey, r);
				
				keys[r] = k;
			}
			else
			{
				const k = keys[r] = Uint8Array.from(keys[r - 1]);
				rolBytes(k, (blockSize >>> 2) + 24);
			}
		}

		return keys;
	}
}

class KalynaEncryptTransform extends KalynaTransform
{
	constructor()
	{
		super(false);
	}

	transformBlock(block, dest, destOffset, roundKeys)
	{
		const state = Uint8Array.from(block);
		const rounds = roundKeys.length - 1;

		addKey(state, roundKeys[0]);

		for (let r = 1; r < rounds; r++)
		{
			subBytes(state);
			shiftRows(state);
			mixColumns(state);
			xorBytes(state, roundKeys[r]);
		}

		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addKey(state, roundKeys[rounds]);

		dest.set(state, destOffset);
	}
}

class KalynaDecryptTransform extends KalynaTransform
{
	constructor()
	{
		super(true);
	}

	transformBlock(block, dest, destOffset, roundKeys)
	{
		const state = Uint8Array.from(block);
		const rounds = roundKeys.length - 1;

		invAddKey(state, roundKeys[0]);
		invMixColumns(state);
		invShiftRows(state);
		invSubBytes(state);
		
		for (let r = 1; r < rounds; r++)
		{
			xorBytes(state, roundKeys[r]);
			invMixColumns(state);
			invShiftRows(state);
			invSubBytes(state);
		}

		invAddKey(state, roundKeys[rounds]);

		dest.set(state, destOffset);
	}

	prepareRoundKeys(keyBytes, blockSize, rounds)
	{
		const keys = super.prepareRoundKeys(keyBytes, blockSize, rounds);
		keys.reverse();
		return keys;
	}
}

export {
	KalynaEncryptTransform,
	KalynaDecryptTransform
};