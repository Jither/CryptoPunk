import { BlockCipherTransform } from "./block-cipher";
import { int32sToBytesLE, bytesToInt32sLE } from "../../cryptopunk.utils";
import { add, rol } from "../../cryptopunk.bitarith";

const ROUNDS = 32;

const SBOX_NAMES = [
	"Official GOST R 34.12-2015",
	"Test GOST R 34.11-94",
	"Test GOST 28147-89",
	"CryptoPro A",
	"CryptoPro B",
	"CryptoPro C",
	"CryptoPro D",
	"CryptoPro GOST R 34.11-94"
];

const SBOX_VALUES = [
	"official",
	"test-3411-94",
	"test-28147-89",
	"cryptopro-a",
	"cryptopro-b",
	"cryptopro-c",
	"cryptopro-d",
	"cryptopro-3411-94"
];

const SBOXES = {
	"official": [
		0xc, 0x4, 0x6, 0x2, 0xa, 0x5, 0xb, 0x9, 0xe, 0x8, 0xd, 0x7, 0x0, 0x3, 0xf, 0x1,
		0x6, 0x8, 0x2, 0x3, 0x9, 0xa, 0x5, 0xc, 0x1, 0xe, 0x4, 0x7, 0xb, 0xd, 0x0, 0xf,
		0xb, 0x3, 0x5, 0x8, 0x2, 0xf, 0xa, 0xd, 0xe, 0x1, 0x7, 0x4, 0xc, 0x9, 0x6, 0x0,
		0xc, 0x8, 0x2, 0x1, 0xd, 0x4, 0xf, 0x6, 0x7, 0x0, 0xa, 0x5, 0x3, 0xe, 0x9, 0xb,
		0x7, 0xf, 0x5, 0xa, 0x8, 0x1, 0x6, 0xd, 0x0, 0x9, 0x3, 0xe, 0xb, 0x4, 0x2, 0xc,
		0x5, 0xd, 0xf, 0x6, 0x9, 0x2, 0xc, 0xa, 0xb, 0x7, 0x8, 0x1, 0x4, 0x3, 0xe, 0x0,
		0x8, 0xe, 0x2, 0x5, 0x6, 0x9, 0x1, 0xc, 0xf, 0x4, 0xb, 0x0, 0xd, 0xa, 0x3, 0x7,
		0x1, 0x7, 0xe, 0xd, 0x0, 0x5, 0x8, 0x3, 0x4, 0xf, 0xa, 0x6, 0x9, 0xc, 0xb, 0x2
	],

	"test-3411-94": [
		0x4, 0xa, 0x9, 0x2, 0xd, 0x8, 0x0, 0xe, 0x6, 0xb, 0x1, 0xc, 0x7, 0xf, 0x5, 0x3,
		0xe, 0xb, 0x4, 0xc, 0x6, 0xd, 0xf, 0xa, 0x2, 0x3, 0x8, 0x1, 0x0, 0x7, 0x5, 0x9,
		0x5, 0x8, 0x1, 0xd, 0xa, 0x3, 0x4, 0x2, 0xe, 0xf, 0xc, 0x7, 0x6, 0x0, 0x9, 0xb,
		0x7, 0xd, 0xa, 0x1, 0x0, 0x8, 0x9, 0xf, 0xe, 0x4, 0x6, 0xc, 0xb, 0x2, 0x5, 0x3,
		0x6, 0xc, 0x7, 0x1, 0x5, 0xf, 0xd, 0x8, 0x4, 0xa, 0x9, 0xe, 0x0, 0x3, 0xb, 0x2,
		0x4, 0xb, 0xa, 0x0, 0x7, 0x2, 0x1, 0xd, 0x3, 0x6, 0x8, 0x5, 0x9, 0xc, 0xf, 0xe,
		0xd, 0xb, 0x4, 0x1, 0x3, 0xf, 0x5, 0x9, 0x0, 0xa, 0xe, 0x7, 0x6, 0x8, 0x2, 0xc,
		0x1, 0xf, 0xd, 0x0, 0x5, 0x7, 0xa, 0x4, 0x9, 0x2, 0x3, 0xe, 0x6, 0xb, 0x8, 0xc
	],

	"test-28147-89": [
		0x4, 0x2, 0xf, 0x5, 0x9, 0x1, 0x0, 0x8, 0xe, 0x3, 0xb, 0xc, 0xd, 0x7, 0xa, 0x6,
		0xc, 0x9, 0xf, 0xe, 0x8, 0x1, 0x3, 0xa, 0x2, 0x7, 0x4, 0xd, 0x6, 0x0, 0xb, 0x5,
		0xd, 0x8, 0xe, 0xc, 0x7, 0x3, 0x9, 0xa, 0x1, 0x5, 0x2, 0x4, 0x6, 0xf, 0x0, 0xb,
		0xe, 0x9, 0xb, 0x2, 0x5, 0xf, 0x7, 0x1, 0x0, 0xd, 0xc, 0x6, 0xa, 0x4, 0x3, 0x8,
		0x3, 0xe, 0x5, 0x9, 0x6, 0x8, 0x0, 0xd, 0xa, 0xb, 0x7, 0xc, 0x2, 0x1, 0xf, 0x4,
		0x8, 0xf, 0x6, 0xb, 0x1, 0x9, 0xc, 0x5, 0xd, 0x3, 0x7, 0xa, 0x0, 0xe, 0x2, 0x4,
		0x9, 0xb, 0xc, 0x0, 0x3, 0x6, 0x7, 0x5, 0x4, 0x8, 0xe, 0xf, 0x1, 0xa, 0x2, 0xd,
		0xc, 0x6, 0x5, 0x2, 0xb, 0x0, 0x9, 0xd, 0x3, 0xe, 0x7, 0xa, 0xf, 0x4, 0x1, 0x8
	],

	"cryptopro-a": [
		0x9, 0x6, 0x3, 0x2, 0x8, 0xb, 0x1, 0x7, 0xa, 0x4, 0xe, 0xf, 0xc, 0x0, 0xd, 0x5,
		0x3, 0x7, 0xe, 0x9, 0x8, 0xa, 0xf, 0x0, 0x5, 0x2, 0x6, 0xc, 0xb, 0x4, 0xd, 0x1,
		0xe, 0x4, 0x6, 0x2, 0xb, 0x3, 0xd, 0x8, 0xc, 0xf, 0x5, 0xa, 0x0, 0x7, 0x1, 0x9,
		0xe, 0x7, 0xa, 0xc, 0xd, 0x1, 0x3, 0x9, 0x0, 0x2, 0xb, 0x4, 0xf, 0x8, 0x5, 0x6,
		0xb, 0x5, 0x1, 0x9, 0x8, 0xd, 0xf, 0x0, 0xe, 0x4, 0x2, 0x3, 0xc, 0x7, 0xa, 0x6,
		0x3, 0xa, 0xd, 0xc, 0x1, 0x2, 0x0, 0xb, 0x7, 0x5, 0x9, 0x4, 0x8, 0xf, 0xe, 0x6,
		0x1, 0xd, 0x2, 0x9, 0x7, 0xa, 0x6, 0x0, 0x8, 0xc, 0x4, 0x5, 0xf, 0x3, 0xb, 0xe,
		0xb, 0xa, 0xf, 0x5, 0x0, 0xc, 0xe, 0x8, 0x6, 0x2, 0x3, 0x9, 0x1, 0x7, 0xd, 0x4	
	],

	"cryptopro-b": [
		0x8, 0x4, 0xb, 0x1, 0x3, 0x5, 0x0, 0x9, 0x2, 0xe, 0xa, 0xc, 0xd, 0x6, 0x7, 0xf, 
		0x0, 0x1, 0x2, 0xa, 0x4, 0xd, 0x5, 0xc, 0x9, 0x7, 0x3, 0xf, 0xb, 0x8, 0x6, 0xe, 
		0xe, 0xc, 0x0, 0xa, 0x9, 0x2, 0xd, 0xb, 0x7, 0x5, 0x8, 0xf, 0x3, 0x6, 0x1, 0x4, 
		0x7, 0x5, 0x0, 0xd, 0xb, 0x6, 0x1, 0x2, 0x3, 0xa, 0xc, 0xf, 0x4, 0xe, 0x9, 0x8, 
		0x2, 0x7, 0xc, 0xf, 0x9, 0x5, 0xa, 0xb, 0x1, 0x4, 0x0, 0xd, 0x6, 0x8, 0xe, 0x3, 
		0x8, 0x3, 0x2, 0x6, 0x4, 0xd, 0xe, 0xb, 0xc, 0x1, 0x7, 0xf, 0xa, 0x0, 0x9, 0x5, 
		0x5, 0x2, 0xa, 0xb, 0x9, 0x1, 0xc, 0x3, 0x7, 0x4, 0xd, 0x0, 0x6, 0xf, 0x8, 0xe, 
		0x0, 0x4, 0xb, 0xe, 0x8, 0x3, 0x7, 0x1, 0xa, 0x2, 0x9, 0x6, 0xf, 0xd, 0x5, 0xc
	],

	"cryptopro-c": [
		0x1, 0xb, 0xc, 0x2, 0x9, 0xd, 0x0, 0xf, 0x4, 0x5, 0x8, 0xe, 0xa, 0x7, 0x6, 0x3,
		0x0, 0x1, 0x7, 0xd, 0xb, 0x4, 0x5, 0x2, 0x8, 0xe, 0xf, 0xc, 0x9, 0xa, 0x6, 0x3,
		0x8, 0x2, 0x5, 0x0, 0x4, 0x9, 0xf, 0xa, 0x3, 0x7, 0xc, 0xd, 0x6, 0xe, 0x1, 0xb,
		0x3, 0x6, 0x0, 0x1, 0x5, 0xd, 0xa, 0x8, 0xb, 0x2, 0x9, 0x7, 0xe, 0xf, 0xc, 0x4,
		0x8, 0xd, 0xb, 0x0, 0x4, 0x5, 0x1, 0x2, 0x9, 0x3, 0xc, 0xe, 0x6, 0xf, 0xa, 0x7,
		0xc, 0x9, 0xb, 0x1, 0x8, 0xe, 0x2, 0x4, 0x7, 0x3, 0x6, 0x5, 0xa, 0x0, 0xf, 0xd,
		0xa, 0x9, 0x6, 0x8, 0xd, 0xe, 0x2, 0x0, 0xf, 0x3, 0x5, 0xb, 0x4, 0x1, 0xc, 0x7,
		0x7, 0x4, 0x0, 0x5, 0xa, 0x2, 0xf, 0xe, 0xc, 0x6, 0x1, 0xb, 0xd, 0x9, 0x3, 0x8
	],

	"cryptopro-d": [
		0xf, 0xc, 0x2, 0xa, 0x6, 0x4, 0x5, 0x0, 0x7, 0x9, 0xe, 0xd, 0x1, 0xb, 0x8, 0x3,
		0xb, 0x6, 0x3, 0x4, 0xc, 0xf, 0xe, 0x2, 0x7, 0xd, 0x8, 0x0, 0x5, 0xa, 0x9, 0x1,
		0x1, 0xc, 0xb, 0x0, 0xf, 0xe, 0x6, 0x5, 0xa, 0xd, 0x4, 0x8, 0x9, 0x3, 0x7, 0x2,
		0x1, 0x5, 0xe, 0xc, 0xa, 0x7, 0x0, 0xd, 0x6, 0x2, 0xb, 0x4, 0x9, 0x3, 0xf, 0x8,
		0x0, 0xc, 0x8, 0x9, 0xd, 0x2, 0xa, 0xb, 0x7, 0x3, 0x6, 0x5, 0x4, 0xe, 0xf, 0x1,
		0x8, 0x0, 0xf, 0x3, 0x2, 0x5, 0xe, 0xb, 0x1, 0xa, 0x4, 0x7, 0xc, 0x9, 0xd, 0x6,
		0x3, 0x0, 0x6, 0xf, 0x1, 0xe, 0x9, 0x2, 0xd, 0x8, 0xc, 0x4, 0xb, 0xa, 0x5, 0x7,
		0x1, 0xa, 0x6, 0x8, 0xf, 0xb, 0x0, 0x4, 0xc, 0x3, 0x5, 0x9, 0x7, 0xd, 0x2, 0xe
	],

	"cryptopro-3411-94": [
		0xa, 0x4, 0x5, 0x6, 0x8, 0x1, 0x3, 0x7, 0xd, 0xc, 0xe, 0x0, 0x9, 0x2, 0xb, 0xf,
		0x5, 0xf, 0x4, 0x0, 0x2, 0xd, 0xb, 0x9, 0x1, 0x7, 0x6, 0x3, 0xc, 0xe, 0xa, 0x8,
		0x7, 0xf, 0xc, 0xe, 0x9, 0x4, 0x1, 0x0, 0x3, 0xb, 0x5, 0x2, 0x6, 0xa, 0x8, 0xd,
		0x4, 0xa, 0x7, 0xc, 0x0, 0xf, 0x2, 0x8, 0xe, 0x1, 0x6, 0x5, 0xd, 0xb, 0x9, 0x3,
		0x7, 0x6, 0x4, 0xb, 0x9, 0xc, 0x2, 0xa, 0x1, 0x8, 0x0, 0xe, 0xf, 0xd, 0x3, 0x5,
		0x7, 0x6, 0x2, 0x4, 0xd, 0x9, 0xf, 0x0, 0xa, 0x1, 0x5, 0xb, 0x8, 0xe, 0xc, 0x3,
		0xd, 0xe, 0x4, 0x1, 0x7, 0x0, 0x5, 0xa, 0x3, 0xc, 0x8, 0xf, 0x6, 0x2, 0x9, 0xb,
		0x1, 0x3, 0xa, 0x9, 0x5, 0xb, 0x4, 0xf, 0x8, 0x6, 0x7, 0xe, 0xd, 0x0, 0x2, 0xc,
	]
};

const KS = [
	0, 1, 2, 3, 4, 5, 6, 7,
	0, 1, 2, 3, 4, 5, 6, 7,
	0, 1, 2, 3, 4, 5, 6, 7,
	7, 6, 5, 4, 3, 2, 1, 0
];

function round(left, sbox, k)
{
	left = add(left, k);
	left =
		(sbox[        left         & 0x0f]       ) |
		(sbox[ 16 + ((left >>>  4) & 0x0f)] <<  4) |
		(sbox[ 32 + ((left >>>  8) & 0x0f)] <<  8) |
		(sbox[ 48 + ((left >>> 12) & 0x0f)] << 12) |
		(sbox[ 64 + ((left >>> 16) & 0x0f)] << 16) |
		(sbox[ 80 + ((left >>> 20) & 0x0f)] << 20) |
		(sbox[ 96 + ((left >>> 24) & 0x0f)] << 24) |
		(sbox[112 + ((left >>> 28) & 0x0f)] << 28);
	return rol(left, 11);
}

class MagmaTransform extends BlockCipherTransform
{
	constructor(decrypt)
	{
		super(decrypt);
		this.addOption("sbox", "S-box", "official", { type: "select", texts: SBOX_NAMES, values: SBOX_VALUES });
	}

	generateSubKeys(keyBytes)
	{
		return bytesToInt32sLE(keyBytes);
	}

	transform(bytes, keyBytes)
	{
		this.checkKeySize(keyBytes, 256);

		const subKeys = this.generateSubKeys(keyBytes);

		return this.transformBlocks(bytes, 64, subKeys, SBOXES[this.options.sbox]);
	}
}

class MagmaEncryptTransform extends MagmaTransform
{
	constructor()
	{
		super(false);
	}

	transformBlock(block, dest, destOffset, subKeys, sbox)
	{
		let [left, right] = bytesToInt32sLE(block);

		for (let i = 0; i < ROUNDS; i++)
		{
			const f = round(left, sbox, subKeys[KS[i]]);
			[left, right] = [f ^ right, left];
		}

		dest.set(int32sToBytesLE([right, left]), destOffset);
	}
}

class MagmaDecryptTransform extends MagmaTransform
{
	constructor()
	{
		super(true);
	}

	transformBlock(block, dest, destOffset, subKeys, sbox)
	{
		let [left, right] = bytesToInt32sLE(block);

		for (let i = ROUNDS - 1; i >= 0; i--)
		{
			const f = round(left, sbox, subKeys[KS[i]]);
			[left, right] = [f ^ right, left];
		}

		dest.set(int32sToBytesLE([right, left]), destOffset);
	}
}

export {
	MagmaEncryptTransform,
	MagmaDecryptTransform
};