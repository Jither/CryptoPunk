import { BlockCipherTransform } from "./block-cipher";
import { gfMulTable, gfMul } from "../../cryptopunk.galois";
import { int32sToBytesBE, bytesToInt32sBE } from "../../cryptopunk.utils";
import { rol16 } from "../../cryptopunk.bitarith";

const MAX_ROUNDS = 32;
const RECOMMENDED_ROUND_COUNT = {
	128: 18,
	192: 22,
	256: 26
};

const CLEFIA_POLYNOMIAL = 0x11d;
const P = 0xb7e1; // (Euler's number - 2) * 2^16
const Q = 0x243f; // (PI - 3) * 2^16

// TODO: Compute S-boxes
const SBOX_0 = [
	0x57, 0x49, 0xd1, 0xc6, 0x2f, 0x33, 0x74, 0xfb, 0x95, 0x6d, 0x82, 0xea, 0x0e, 0xb0, 0xa8, 0x1c,
	0x28, 0xd0, 0x4b, 0x92, 0x5c, 0xee, 0x85, 0xb1, 0xc4, 0x0a, 0x76, 0x3d, 0x63, 0xf9, 0x17, 0xaf,
	0xbf, 0xa1, 0x19, 0x65, 0xf7, 0x7a, 0x32, 0x20, 0x06, 0xce, 0xe4, 0x83, 0x9d, 0x5b, 0x4c, 0xd8,
	0x42, 0x5d, 0x2e, 0xe8, 0xd4, 0x9b, 0x0f, 0x13, 0x3c, 0x89, 0x67, 0xc0, 0x71, 0xaa, 0xb6, 0xf5,
	0xa4, 0xbe, 0xfd, 0x8c, 0x12, 0x00, 0x97, 0xda, 0x78, 0xe1, 0xcf, 0x6b, 0x39, 0x43, 0x55, 0x26,
	0x30, 0x98, 0xcc, 0xdd, 0xeb, 0x54, 0xb3, 0x8f, 0x4e, 0x16, 0xfa, 0x22, 0xa5, 0x77, 0x09, 0x61,
	0xd6, 0x2a, 0x53, 0x37, 0x45, 0xc1, 0x6c, 0xae, 0xef, 0x70, 0x08, 0x99, 0x8b, 0x1d, 0xf2, 0xb4,
	0xe9, 0xc7, 0x9f, 0x4a, 0x31, 0x25, 0xfe, 0x7c, 0xd3, 0xa2, 0xbd, 0x56, 0x14, 0x88, 0x60, 0x0b,
	0xcd, 0xe2, 0x34, 0x50, 0x9e, 0xdc, 0x11, 0x05, 0x2b, 0xb7, 0xa9, 0x48, 0xff, 0x66, 0x8a, 0x73,
	0x03, 0x75, 0x86, 0xf1, 0x6a, 0xa7, 0x40, 0xc2, 0xb9, 0x2c, 0xdb, 0x1f, 0x58, 0x94, 0x3e, 0xed,
	0xfc, 0x1b, 0xa0, 0x04, 0xb8, 0x8d, 0xe6, 0x59, 0x62, 0x93, 0x35, 0x7e, 0xca, 0x21, 0xdf, 0x47,
	0x15, 0xf3, 0xba, 0x7f, 0xa6, 0x69, 0xc8, 0x4d, 0x87, 0x3b, 0x9c, 0x01, 0xe0, 0xde, 0x24, 0x52,
	0x7b, 0x0c, 0x68, 0x1e, 0x80, 0xb2, 0x5a, 0xe7, 0xad, 0xd5, 0x23, 0xf4, 0x46, 0x3f, 0x91, 0xc9,
	0x6e, 0x84, 0x72, 0xbb, 0x0d, 0x18, 0xd9, 0x96, 0xf0, 0x5f, 0x41, 0xac, 0x27, 0xc5, 0xe3, 0x3a,
	0x81, 0x6f, 0x07, 0xa3, 0x79, 0xf6, 0x2d, 0x38, 0x1a, 0x44, 0x5e, 0xb5, 0xd2, 0xec, 0xcb, 0x90,
	0x9a, 0x36, 0xe5, 0x29, 0xc3, 0x4f, 0xab, 0x64, 0x51, 0xf8, 0x10, 0xd7, 0xbc, 0x02, 0x7d, 0x8e
];

const SBOX_1 = [
	0x6c, 0xda, 0xc3, 0xe9, 0x4e, 0x9d, 0x0a, 0x3d, 0xb8, 0x36, 0xb4, 0x38, 0x13, 0x34, 0x0c, 0xd9,
	0xbf, 0x74, 0x94, 0x8f, 0xb7, 0x9c, 0xe5, 0xdc, 0x9e, 0x07, 0x49, 0x4f, 0x98, 0x2c, 0xb0, 0x93,
	0x12, 0xeb, 0xcd, 0xb3, 0x92, 0xe7, 0x41, 0x60, 0xe3, 0x21, 0x27, 0x3b, 0xe6, 0x19, 0xd2, 0x0e,
	0x91, 0x11, 0xc7, 0x3f, 0x2a, 0x8e, 0xa1, 0xbc, 0x2b, 0xc8, 0xc5, 0x0f, 0x5b, 0xf3, 0x87, 0x8b,
	0xfb, 0xf5, 0xde, 0x20, 0xc6, 0xa7, 0x84, 0xce, 0xd8, 0x65, 0x51, 0xc9, 0xa4, 0xef, 0x43, 0x53,
	0x25, 0x5d, 0x9b, 0x31, 0xe8, 0x3e, 0x0d, 0xd7, 0x80, 0xff, 0x69, 0x8a, 0xba, 0x0b, 0x73, 0x5c,
	0x6e, 0x54, 0x15, 0x62, 0xf6, 0x35, 0x30, 0x52, 0xa3, 0x16, 0xd3, 0x28, 0x32, 0xfa, 0xaa, 0x5e,
	0xcf, 0xea, 0xed, 0x78, 0x33, 0x58, 0x09, 0x7b, 0x63, 0xc0, 0xc1, 0x46, 0x1e, 0xdf, 0xa9, 0x99,
	0x55, 0x04, 0xc4, 0x86, 0x39, 0x77, 0x82, 0xec, 0x40, 0x18, 0x90, 0x97, 0x59, 0xdd, 0x83, 0x1f,
	0x9a, 0x37, 0x06, 0x24, 0x64, 0x7c, 0xa5, 0x56, 0x48, 0x08, 0x85, 0xd0, 0x61, 0x26, 0xca, 0x6f,
	0x7e, 0x6a, 0xb6, 0x71, 0xa0, 0x70, 0x05, 0xd1, 0x45, 0x8c, 0x23, 0x1c, 0xf0, 0xee, 0x89, 0xad,
	0x7a, 0x4b, 0xc2, 0x2f, 0xdb, 0x5a, 0x4d, 0x76, 0x67, 0x17, 0x2d, 0xf4, 0xcb, 0xb1, 0x4a, 0xa8,
	0xb5, 0x22, 0x47, 0x3a, 0xd5, 0x10, 0x4c, 0x72, 0xcc, 0x00, 0xf9, 0xe0, 0xfd, 0xe2, 0xfe, 0xae,
	0xf8, 0x5f, 0xab, 0xf1, 0x1b, 0x42, 0x81, 0xd6, 0xbe, 0x44, 0x29, 0xa6, 0x57, 0xb9, 0xaf, 0xf2,
	0xd4, 0x75, 0x66, 0xbb, 0x68, 0x9f, 0x50, 0x02, 0x01, 0x3c, 0x7f, 0x8d, 0x1a, 0x88, 0xbd, 0xac,
	0xf7, 0xe4, 0x79, 0x96, 0xa2, 0xfc, 0x6d, 0xb2, 0x6b, 0x03, 0xe1, 0x2e, 0x7d, 0x14, 0x95, 0x1d
];

const IVS = {
	128: 0x428a, // (CBRT(2) - 1) * 2^16
	192: 0x7137, // (CBRT(3) - 1) * 2^16
	256: 0xb5c0  // (CBRT(5) - 1) * 2^16
};

const KS_CONSTANTS_PER_ROUND = {
	128: 2,
	192: 4,
	256: 4
};

const KS_ROUNDS = {
	128: 12,
	192: 10,
	256: 10
};

const CON = {};

let MUL2, MUL4, MUL6, MUL8, MULa;

function precompute()
{
	if (MUL2)
	{
		return;
	}

	// Tables for GF multiplication:
	MUL2 = gfMulTable(2, CLEFIA_POLYNOMIAL);
	MUL4 = gfMulTable(4, CLEFIA_POLYNOMIAL);
	MUL6 = gfMulTable(6, CLEFIA_POLYNOMIAL);
	MUL8 = gfMulTable(8, CLEFIA_POLYNOMIAL);
	MULa = gfMulTable(0x0a, CLEFIA_POLYNOMIAL);

	// Compute key schedule constants:
	for (const keySize of Object.keys(IVS))
	{
		const constantsNeeded = KS_CONSTANTS_PER_ROUND[keySize] * KS_ROUNDS[keySize] + MAX_ROUNDS * 2;
		const con = CON[keySize] = new Array(constantsNeeded);

		let t = IVS[keySize];
		const rounds = constantsNeeded / 2;
		for (let i = 0; i < rounds; i++)
		{
			con[2 * i] = ((t ^ P) << 16) | rol16(~t & 0xffff, 1);
			con[2 * i + 1] = ((~t ^ Q) << 16) | rol16(t, 8);
			// Multiply by {0002^-1} in GF(2^16), mod x^16 + x^15 + x^13 + x^11 + x^5 + x^4 + 1
			// polynomial = 0x1a831
			// {0002^1} = 0xd418
			t = gfMul(t, 0xd418, 0x1a831, 65536);
		}
	}
}

// DoubleSwap function Sigma
function doubleSwap(x)
{
	const x0 = (x[0] << 7) | (x[1] >>> 25);
	const x1 = (x[1] << 7) | (x[3] & 0x7f);
	const x2 = (x[2] >>> 7) | (x[0] & 0xfe000000);
	const x3 = (x[2] << 25) | (x[3] >>> 7);
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3;
}

function F0(x, rk)
{
	x ^= rk;
	let x0 = x >>> 24,
		x1 = (x >>> 16) & 0xff,
		x2 = (x >>>  8) & 0xff,
		x3 = x & 0xff;
	x0 = SBOX_0[x0];
	x1 = SBOX_1[x1];
	x2 = SBOX_0[x2];
	x3 = SBOX_1[x3];

	// Diffusion:
	const
		y0 =      x0  ^ MUL2[x1] ^ MUL4[x2] ^ MUL6[x3],
		y1 = MUL2[x0] ^      x1  ^ MUL6[x2] ^ MUL4[x3],
		y2 = MUL4[x0] ^ MUL6[x1] ^      x2  ^ MUL2[x3],
		y3 = MUL6[x0] ^ MUL4[x1] ^ MUL2[x2] ^      x3;

	return (y0 << 24) | (y1 << 16) | (y2 << 8) | y3;
}

function F1(x, rk)
{
	x ^= rk;
	let x0 = x >>> 24,
		x1 = (x >>> 16) & 0xff,
		x2 = (x >>>  8) & 0xff,
		x3 = x & 0xff;
	x0 = SBOX_1[x0];
	x1 = SBOX_0[x1];
	x2 = SBOX_1[x2];
	x3 = SBOX_0[x3];

	// Diffusion:
	const
		y0 =      x0  ^ MUL8[x1] ^ MUL2[x2] ^ MULa[x3],
		y1 = MUL8[x0] ^      x1  ^ MULa[x2] ^ MUL2[x3],
		y2 = MUL2[x0] ^ MULa[x1] ^      x2  ^ MUL8[x3],
		y3 = MULa[x0] ^ MUL2[x1] ^ MUL8[x2] ^      x3;

	return (y0 << 24) | (y1 << 16) | (y2 << 8) | y3;
}

function gfn4(x, rk, rounds)
{
	let x0 = x[0], x1 = x[1], x2 = x[2], x3 = x[3];
	for (let r = 0; r < rounds; r++)
	{
		x1 ^= F0(x0, rk[2 * r]);
		x3 ^= F1(x2, rk[2 * r + 1]);
		[x0, x1, x2, x3] = [x1, x2, x3, x0];
	}
	return [x3, x0, x1, x2];
}

// Inverse GFN changes the word rotations and order of keys
function gfn4inv(x, rk, rounds)
{
	let x0 = x[0], x1 = x[1], x2 = x[2], x3 = x[3];
	for (let r = 0; r < rounds; r++)
	{
		x1 ^= F0(x0, rk[2 * (rounds - r) - 2]);
		x3 ^= F1(x2, rk[2 * (rounds - r) - 1]);
		[x0, x1, x2, x3] = [x3, x0, x1, x2];
	}
	return [x1, x2, x3, x0];
}

function gfn8(xl, xr, rk, rounds)
{
	let x0 = xl[0], x1 = xl[1], x2 = xl[2], x3 = xl[3],
		x4 = xr[0], x5 = xr[1], x6 = xr[2], x7 = xr[3];
	for (let r = 0; r < rounds; r++)
	{
		x1 ^= F0(x0, rk[4 * r]);
		x3 ^= F1(x2, rk[4 * r + 1]);
		x5 ^= F0(x4, rk[4 * r + 2]);
		x7 ^= F1(x6, rk[4 * r + 3]);
		[x0, x1, x2, x3, x4, x5, x6, x7] = [x1, x2, x3, x4, x5, x6, x7, x0];
	}
	return [[x7, x0, x1, x2], [x3, x4, x5, x6]];
}

class ClefiaTransform extends BlockCipherTransform
{
	constructor(decrypt)
	{
		super(decrypt);
	}

	transform(bytes, keyBytes)
	{
		precompute();

		const keySize = this.checkBytesSize("Key", keyBytes, [128, 192, 256]);

		// TODO: Variable rounds
		const rounds = RECOMMENDED_ROUND_COUNT[keySize];
		const keys = this.generateKeys(keyBytes, rounds);

		return this.transformBlocks(bytes, 128, keys, rounds);
	}

	generateKeys(keyBytes, rounds)
	{
		let k = bytesToInt32sBE(keyBytes);
		const keySize = keyBytes.length * 8;

		const rk = new Array(rounds * 2 + 4);

		const con = CON[keySize];
		let l, kl, kr, ll, lr, c;

		if (keySize === 128)
		{
			// Whitening keys:
			rk[0] = k[0];
			rk[1] = k[1];
			rk[rk.length - 2] = k[2];
			rk[rk.length - 1] = k[3];

			// Intermediate key:
			l = gfn4(k, con, 12);
			// Round constants start from CON index 24 (we used the first 24 in GFN):
			c = 24;
		}
		else
		{
			kl = [k[0], k[1], k[2], k[3]];
			kr = keySize === 192 ? [k[4], k[5], ~k[0], ~k[1]] : [k[4], k[5], k[6], k[7]];
			
			// Whitening keys:
			rk[0] = kl[0] ^ kr[0];
			rk[1] = kl[1] ^ kr[1];
			rk[rk.length - 2] = kl[2] ^ kr[2];
			rk[rk.length - 1] = kl[3] ^ kr[3];

			// Intermediate key:
			[ll, lr] = gfn8(kl, kr, con, 10);
			// Round constants start from CON index 40 (we used the first 40 in GFN):
			c = 40;
		}

		for (let i = 0; i < rounds / 2; i++)
		{
			const index = 4 * i;
			if (keySize > 128)
			{
				// Large key sizes swap between using left and right halves of user and intermediate keys:
				l = i % 4 < 2 ? ll : lr;
				k = i % 4 < 2 ? kr : kl;
			}
			let	t0 = l[0] ^ con[c++],
				t1 = l[1] ^ con[c++],
				t2 = l[2] ^ con[c++],
				t3 = l[3] ^ con[c++];

			doubleSwap(l);
			if ((i & 1) === 1)
			{
				t0 ^= k[0];
				t1 ^= k[1];
				t2 ^= k[2];
				t3 ^= k[3];
			}
			rk[index + 2] = t0;
			rk[index + 3] = t1;
			rk[index + 4] = t2;
			rk[index + 5] = t3;
		}

		return rk;
	}

	transformBlock(block, dest, destOffset, keys, rounds)
	{
		let state = bytesToInt32sBE(block);

		state[1] ^= keys[0];
		state[3] ^= keys[1];

		state = gfn4(state, keys.slice(2, keys.length - 2), rounds);

		state[1] ^= keys[keys.length - 2];
		state[3] ^= keys[keys.length - 1];

		dest.set(int32sToBytesBE(state), destOffset);
	}
}

class ClefiaEncryptTransform extends ClefiaTransform
{
	constructor()
	{
		super(false);
	}
}

class ClefiaDecryptTransform extends ClefiaTransform
{
	constructor()
	{
		super(true);
	}

	transformBlock(block, dest, destOffset, keys, rounds)
	{
		let state = bytesToInt32sBE(block);

		state[1] ^= keys[keys.length - 2];
		state[3] ^= keys[keys.length - 1];

		state = gfn4inv(state, keys.slice(2, keys.length - 2), rounds);

		state[1] ^= keys[0];
		state[3] ^= keys[1];

		dest.set(int32sToBytesBE(state), destOffset);
	}
}

export {
	ClefiaEncryptTransform,
	ClefiaDecryptTransform
};